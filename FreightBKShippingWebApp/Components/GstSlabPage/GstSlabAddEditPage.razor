  
@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject GstSlabService GstSlabService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" CloseOnOutsideClick="false" MaxWidth="900px" Width="90%"
         horizontalAlignment="HorizontalAlignment.Center"
         verticalAlignment="VerticalAlignment.Center">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxgstslab"> 
        <DataAnnotationsValidator />
        <ValidationSummary />
       
        <DxFormLayout>
            <DxFormLayoutGroup Caption="Tax Details" ColSpanMd="9">
                <DxFormLayoutItem Caption="Type" ColSpanMd="7">
                    <ChildContent>
                        <DxComboBox @bind-Value="EditModel.GstSlabType" Data="@gstTypes" />
                    </ChildContent>
                </DxFormLayoutItem>




            <DxFormLayoutItem Caption="GST Slab Name">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.GstSlabName" />
                </ChildContent>
            </DxFormLayoutItem>

               

            <DxFormLayoutItem Caption="SGST %">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.GstSlabSgstPer" Min="0" Max="100" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="CGST %">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.GstSlabCgstPer" Min="0" Max="100" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="IGST %">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.GstSlabIgstPer" Min="0" Max="100" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <ChildContent>
                    <DxCheckBox @bind-Checked="EditModel.GstSlabStatus" />
                </ChildContent>
            </DxFormLayoutItem>
            </DxFormLayoutGroup>
        </DxFormLayout>
        
        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit GST Slab";
    private GstSlab EditModel { get; set; } = new();
    private List<string> gstTypes = new() { "GST", "EXEMPT", "NILL RATED" };

    public void Show(GstSlab slab)
    {
        if (slab != null)
        {
            EditModel = new GstSlab
            {
                GstSlabId = slab.GstSlabId,
                GstSlabName = slab.GstSlabName,
                GstSlabType = slab.GstSlabType,
                GstSlabSgstPer = slab.GstSlabSgstPer,
                GstSlabCgstPer = slab.GstSlabCgstPer,
                GstSlabIgstPer = slab.GstSlabIgstPer,
                GstSlabStatus = slab.GstSlabStatus
            };
            Title = "Edit GST Slab";
        }
        else
        {
            EditModel = new GstSlab
            {
                GstSlabType = "GST",
                GstSlabStatus = true
            };
            Title = "Add GST Slab";
        }

        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool result;

            if (EditModel.GstSlabId == 0)
            {
                result = await GstSlabService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("GST Slab created successfully!");
                else
                {
                    ToastService.Error("Failed to create GST Slab!");
                    return;
                }
            }
            else
            {
                result = await GstSlabService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("GST Slab updated successfully!");
                else
                {
                    ToastService.Error("Failed to update GST Slab!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving GST Slab: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
