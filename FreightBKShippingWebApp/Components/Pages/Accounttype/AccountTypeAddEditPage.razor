@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject AccountTypeService AccountTypeService
@inject ToasteService ToastService
@inject AccountGroupService AccountGroupService

<DxPopup @bind-Visible="Visible"
         ShowCloseButton="true"
         HeaderText="@PopupTitle"
         Width="600px"
         CloseOnOutsideClick="false">

    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxaccounttype">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutItem Caption="Name">
                <DxTextBox @bind-Text="EditModel.AccountTypeName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Group ">
                <DxComboBox Data="@groupList"
                            TextFieldName="AccountGroupName"
                            ValueFieldName="AccountGroupId"
                            @bind-Value="EditModel.AccountTypeGroupId"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            NullText="Select Group..."
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <DxCheckBox @bind-Checked="EditModel.Status" />
            </DxFormLayoutItem>
        </DxFormLayout>

        <div class="mt-3">
            <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="Save" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" Click="Cancel" CssClass="ml-2" />
        </div>
    </EditForm>
</DxPopup>

@code {
    private bool Visible { get; set; }
    private AccountType EditModel = new();
    private bool IsEdit = false;
    private List<AccountGroup> groupList = new();

    [Parameter] public EventCallback OnSaved { get; set; }

    private string PopupTitle => IsEdit ? "Edit Account Type" : "Add Account Type";


	protected override async Task OnInitializedAsync()
	{
        groupList = await AccountGroupService.GetAllAsync();
    }

    public void Show(AccountType model)
    {
        IsEdit = model.AccountTypeId > 0;
        EditModel = new AccountType
            {
                AccountTypeId = model.AccountTypeId,
                AccountTypeName = model.AccountTypeName,
                AccountTypeGroupId = model.AccountTypeGroupId,
                CompanyId = model.CompanyId,
                Status = model.Status,
           
          
            };

        Visible = true;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEdit)
        {
            await AccountTypeService.CreateAsync(EditModel);
            ToastService.Success("Account type created successfully.");
        }
        else
        {
            await AccountTypeService.UpdateAsync( EditModel);
            ToastService.Success("Account type updated successfully.");
        }

        Visible = false;
        await OnSaved.InvokeAsync();
    }

    private void Cancel()
    {
        Visible = false;
    }
}
