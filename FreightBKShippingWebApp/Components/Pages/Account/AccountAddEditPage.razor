@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject AccountService AccountService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject StateService StateService
@inject CountryService CountryService
@inject AccountGroupService AccountGroupService
@inject AccountTypeService AccountTypeService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" CloseOnOutsideClick="false" MaxWidth="1050px"  Width="90%"  
horizontalAlignment="HorizontalAlignment.Center"
verticalAlignment="VerticalAlignment.Center"
         scrollable="true">
         <BodyContentTemplate Context="ctxaccountadd">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxaccount">
            <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            @* <DxFormLayoutItem Caption="Account Code"> *@
            @*     <DxTextBox @bind-Text="EditModel.AccountCode" /> *@
            @* </DxFormLayoutItem> *@

            <DxFormLayoutItem Caption="Account Name" ColSpanMd="6" ColSpanSm="12">
                <DxTextBox @bind-Text="EditModel.AccountName" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Opening Bal." ColSpanMd="6">
                <div class="d-flex gap-1">
                        <DxSpinEdit @bind-value="EditModel.AccountOpening"  ShowSpinButtons=false></DxSpinEdit>

                    <DxComboBox Data="@balanceTypes"
                                @bind-Value="EditModel.AccountBalanceType"
                                NullText="Select Balance Type..." AllowUserInput="true"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </div> 
            </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Type" ColSpanMd="6">
                <DxComboBox Data="@typeList"
                            TextFieldName="AccountTypeName"
                            ValueFieldName="AccountTypeId"
                            Value="@EditModel.AccountTypeId"
                          ValueChanged="@(async (int v) => await OnTypeChanged(v))"
                            ValueExpression="() => EditModel.AccountTypeId"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            NullText="Select Type..."
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />

</DxFormLayoutItem>

            <DxFormLayoutItem Caption="Group" ColSpanMd="4">
                <DxComboBox Data="@groupList"
                            TextFieldName="AccountGroupName"
                            ValueFieldName="AccountGroupId"
                            @bind-Value="EditModel.AccountGroupId"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            NullText="Select Group..."
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
 
         @*    <DxFormLayoutItem Caption="Master Group " ColSpanMd="4">
                <DxComboBox Data="@mastergroup"
                            @bind-Value="EditModel.AccountGroup"
                            NullText="Select Method..."
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem> *@
            <DxFormLayoutItem Caption="Tax Type" ColSpanMd="4">
                <DxComboBox Data="@taxTypes"
                @bind-Value="EditModel.AccountTaxType"
                NullText="Select Tax Type..."
                AllowUserInput="false"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>

          


            @if (EditModel.AccountGroupId !=0)
            {
                    <DxFormLayoutTabPages>  
                    <DxFormLayoutTabPage Caption="Basic Info">

          <DxFormLayoutGroup ColSpanMd="6" Caption="Basic Info">

                        <DxFormLayoutItem Caption="Print Name" ColSpanMd="12">
                            <DxTextBox @bind-Text="EditModel.AccountPrintName" />
                        </DxFormLayoutItem>
             

                <DxFormLayoutItem Caption="Address " ColSpanMd="12">
                    <DxMemo @bind-Text="EditModel.AccountAddress1" Rows="1"/>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="City" ColSpanMd="12">
                    <DxTextBox @bind-Text="EditModel.AccountCity" />
                </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Pincode" ColSpanMd="12">
                            <DxTextBox @bind-Text="EditModel.AccountPincode" />
                        </DxFormLayoutItem>
                <DxFormLayoutItem Caption="State" ColSpanMd="12">
                    <DxComboBox Data="@stateList" @bind-Value="EditModel.AccountStateId"
                    ValueFieldName="StateId" TextFieldName="StateName" AllowUserInput="true"
                    SearchMode="ListSearchMode.AutoSearch"
                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Country" ColSpanMd="12">
                               @*  <DxComboBox Data="@countryList" @bind-Value="EditModel.AccountCountry" TValue="string?" TData="Country"
                                                ValueFieldName="CountryName" TextFieldName="CountryName" AllowUserInput="true"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" /> *@
                                    <DxComboBox TData="Country" TValue="String"
                                                Data="@countryList"
                                                TextFieldName="CountryName"
                                                ValueFieldName="CountryName"
                                                ClearButtonVisible="true"
                                                AllowUserInput="false"
                                                NullText="-- Select Country --"
                                                @bind-Text="EditModel.AccountCountry"
                                                SearchMode="ListSearchMode.AutoSearch"
                                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                            </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Contact Person" ColSpanMd="12">
                            <DxTextBox @bind-Text="EditModel.AccountContactPerson" />
                        </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Mobile" ColSpanMd="6">
                    <DxTextBox @bind-Text="EditModel.AccountMobile" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Phone" ColSpanMd="6">
                    <DxTextBox @bind-Text="EditModel.AccountPhone" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                    <DxTextBox @bind-Text="EditModel.AccountEmail" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Website" ColSpanMd="12">
                    <DxTextBox @bind-Text="EditModel.AccountWebsite" />
                </DxFormLayoutItem>
                    

          </DxFormLayoutGroup>


                        <DxFormLayoutGroup Caption="Tax Details" ColSpanMd="6">
                            <DxFormLayoutItem Caption="Registration Type" ColSpanMd="12">
                                <DxComboBox Data="@registrationTypes"
                                            @bind-Value="EditModel.AccountRegisterType"
                                            NullText="Select Registration Type..."
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" AllowUserInput="true"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="GST No" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountGstNo" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="PAN" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountPan" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="TAN" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountTanNo" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Ifs Code" ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.AccountIfsCode" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="MSME" ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.AccountMsmeno" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Tds Applicable" ColSpanMd="6">
                                <DxCheckBox @bind-Checked="EditModel.AccountTdsApplicable"></DxCheckBox>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Tds Perc(%)" ColSpanMd="6">
                                <DxSpinEdit @bind-Value="EditModel.AccountTdsPer" ShowSpinButtons="false" />
                            </DxFormLayoutItem>
                            <DxFormLayoutGroup Caption="Credit info" ColSpanMd="12">
                                <DxFormLayoutItem Caption="Credit Limit" ColSpanMd="6">
                                    <DxSpinEdit @bind-Value="EditModel.AccountCreditLimit" ShowSpinButtons="false"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Credit Days" ColSpanMd="6">
                                    <DxSpinEdit @bind-Value="EditModel.AccountCreditDays" ShowSpinButtons="false"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Account Method" ColSpanMd="12">
                                    <DxComboBox Data="@methods"
                                                @bind-Value="EditModel.AccountMethod"
                                                NullText="Select Method..." AllowUserInput="true"
                                                SearchMode="ListSearchMode.AutoSearch"
                                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                        </DxFormLayoutGroup>
                   

                    </DxFormLayoutTabPage>      
                    <DxFormLayoutTabPage Caption="Banking">
                        <DxFormLayoutGroup ColSpanMd="6">
                            <DxFormLayoutItem Caption="Bank Name" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountBankName" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Bank A/C" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountAccNo" />
                            </DxFormLayoutItem>  
                            <DxFormLayoutItem Caption="Ifsc Code" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountIfsCode" />
                            </DxFormLayoutItem> 
                            <DxFormLayoutItem Caption="Branch" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountBankBranch" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Swift Code" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountSwiftCode" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Auth Delar Code" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.AccountAuthdCode" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                      <DxFormLayoutItem Caption="Remarks" ColSpanMd="6">
                          <DxMemo @bind-Text="EditModel.AccountRemarks"></DxMemo>
                      </DxFormLayoutItem>
                    </DxFormLayoutTabPage>


                </DxFormLayoutTabPages>

            }
        </DxFormLayout>

        <div class="mt-1 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm> 
    </BodyContentTemplate>
 @*    <FooterContentTemplate>
        <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
        <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
    </FooterContentTemplate> *@
</DxPopup>
<style >
    .popup-footer {
        position: sticky; /* ya fixed bhi kar sakte ho */
        bottom: 0;
        background: #fff;
        padding: 10px;
        text-align: right;
        border-top: 1px solid #ddd;
        z-index: 10;
    }

</style>
@code {
    private async Task OnTypeChanged(int? newTypeId)
    {
        if (newTypeId.HasValue)
        {
            EditModel.AccountTypeId = newTypeId.Value;
            var sel = typeList.FirstOrDefault(x => x.AccountTypeId == newTypeId.Value);
            EditModel.AccountGroupId = sel?.AccountTypeGroupId ?? 0;
        }
        else
        {
            EditModel.AccountTypeId = 0; // or 0
            EditModel.AccountGroupId = 0;
        }
    }


    //==========================================
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Account";
    private Account EditModel { get; set; } = new();
    private List<State> stateList = new();
    private List<Country> countryList = new();
    private List<AccountGroup> groupList = new();
    private List<AccountType> typeList = new();

    private List<string> balanceTypes = new() { "Dr", "Cr" };
    private List<string> methods = new() { "Bill to Bill", "On Account" };
    
        private List<string> registrationTypes = new()
    {
        "N/A",
        "OVERSEA",
        "REGULAR",
        "SEZ",
        "SEZ WITH LUT",
        "COMPOSITION",
        "UNREGISTERED"
    };
    private List<string> mastergroup = new()
    {
        "BANK",
        "CASH",
        "PUMP",
        "CUSTOMER",
        "SUPPLIER",
        "TRANSPORTER",
        "DRIVER",
        "ACCOUNTS",
        "PARTY"
    };

    private List<string> taxTypes = new()
    {
        "Central Tax",
        "State Tax",
        "Integrated Tax",
        "Cess",
        "TDS",
        "N/A"
    };

    public void Show(Account? account = null)
    {
        if (account == null)
        {
        EditModel = new Account();
            Title = "Add Account";
        }
        else
        {
            EditModel = account;         // direct same model
            Title = "Edit Account";
        }
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        stateList = await StateService.GetStatesAsync();
        countryList = await CountryService.GetAllAsync();
        groupList = await AccountGroupService.GetAllAsync();   // API से load
        typeList = await AccountTypeService.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {

            if (EditModel.AccountId == 0)
            {
                var result = await AccountService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Account created successfully!");
                else
                {
                    ToastService.Error("Account failed to create!");
                    return;
                }
            }
            else
            {
                var result = await AccountService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Account updated successfully!");
                else
                {
                    ToastService.Error("Account failed to update!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving account: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
