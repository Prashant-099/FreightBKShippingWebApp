@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject AccountService AccountService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject StateService StateService
@inject CountryService CountryService
@inject AccountGroupService AccountGroupService
@inject AccountTypeService AccountTypeService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title"  CloseOnOutsideClick="false">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxaccount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutItem Caption="Account Code">
                <DxTextBox @bind-Text="EditModel.AccountCode" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Account Name">
                <DxTextBox @bind-Text="EditModel.AccountName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Tax Type">
                <DxComboBox Data="@taxTypes"
                @bind-Value="EditModel.AccountTaxType"
                NullText="Select Tax Type..."
                AllowUserInput="false"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>


            <DxFormLayoutItem Caption="Group">
                <DxComboBox Data="@groupList"
                TextFieldName="AccountGroupName"
                ValueFieldName="AccountGroupId"
                @bind-Value="EditModel.AccountGroupId"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                NullText="Select Group..."
                AllowUserInput="true"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Type">
                <DxComboBox Data="@typeList"
                TextFieldName="AccountTypeName"
                ValueFieldName="AccountTypeId"
                @bind-Value="EditModel.AccountTypeId"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                NullText="Select Type..." AllowUserInput="true"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Master Group ">
                <DxComboBox Data="@mastergroup"
                @bind-Value="EditModel.AccountGroup"
                NullText="Select Method..."
                AllowUserInput="true"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Opening Bal."></DxFormLayoutItem>
            <DxFormLayoutItem Caption="Balance Type">
                <DxComboBox Data="@balanceTypes"
                @bind-Value="EditModel.AccountBalanceType"
                NullText="Select Balance Type..." AllowUserInput="true"
                SearchMode="ListSearchMode.AutoSearch"
                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            @if (EditModel.AccountGroup == "PARTY" || EditModel.AccountGroup == "BANK" || EditModel.AccountGroup == "CASH" || EditModel.AccountGroup == "PUMP" || EditModel.AccountGroup == "CUSTOMER" || EditModel.AccountGroup == "SUPPLIER" || EditModel.AccountGroup == "TRANSPORTER")
            {
                <DxFormLayoutItem Caption="Contact Person">
                    <DxTextBox @bind-Text="EditModel.AccountContactPerson" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Address ">
                    <DxMemo @bind-Text="EditModel.AccountAddress1" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="City">
                    <DxTextBox @bind-Text="EditModel.AccountCity" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="State">
                    <DxComboBox Data="@stateList" @bind-Value="EditModel.AccountStateId"
                    ValueFieldName="StateId" TextFieldName="StateName" AllowUserInput="true"
                    SearchMode="ListSearchMode.AutoSearch"
                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>                <DxFormLayoutItem Caption="Country">
                    <DxComboBox Data="@countryList" @bind-Value="EditModel.AccountCountry"
                    ValueFieldName="CountryId" TextFieldName="CountryName" AllowUserInput="true"
                    SearchMode="ListSearchMode.AutoSearch"
                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Pincode">
                    <DxTextBox @bind-Text="EditModel.AccountPincode" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Mobile">
                    <DxTextBox @bind-Text="EditModel.AccountMobile" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Phone">
                    <DxTextBox @bind-Text="EditModel.AccountPhone" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Email">
                    <DxTextBox @bind-Text="EditModel.AccountEmail" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Website">
                    <DxTextBox @bind-Text="EditModel.AccountWebsite" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="PAN">
                    <DxTextBox @bind-Text="EditModel.AccountPan" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="GST No">
                    <DxTextBox @bind-Text="EditModel.AccountGstNo" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Is SEZ">
                    <DxCheckBox @bind-Checked="EditModel.AccountIsSez" />
                </DxFormLayoutItem>            <DxFormLayoutItem Caption="Registration Type">
                    <DxComboBox Data="@registrationTypes"
                    @bind-Value="EditModel.AccountRegisterType"
                    NullText="Select Registration Type..."
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" AllowUserInput="true"
                    SearchMode="ListSearchMode.AutoSearch"
                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>                       <DxFormLayoutItem Caption="Method">
                    <DxComboBox Data="@methods"
                    @bind-Value="EditModel.AccountMethod"
                    NullText="Select Method..." AllowUserInput="true"
                    SearchMode="ListSearchMode.AutoSearch"
                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Status">
                    <DxCheckBox @bind-Checked="EditModel.AccountStatus" />
                </DxFormLayoutItem>
            }
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Account";
    private Account EditModel { get; set; } = new();
    private List<State> stateList = new();
    private List<Country> countryList = new();
    private List<AccountGroup> groupList = new();
    private List<AccountType> typeList = new();

    private List<string> balanceTypes = new() { "Dr", "Cr" };
    private List<string> methods = new() { "Bill to Bill", "On Account" };
    
        private List<string> registrationTypes = new()
    {
        "N/A",
        "OVERSEA",
        "REGULAR",
        "SEZ",
        "SEZ WITH LUT",
        "COMPOSITION",
        "UNREGISTERED"
    };
    private List<string> mastergroup = new()
    {
        "BANK",
        "CASH",
        "PUMP",
        "CUSTOMER",
        "SUPPLIER",
        "TRANSPORTER",
        "DRIVER",
        "ACCOUNTS",
        "PARTY"
    };

    private List<string> taxTypes = new()
    {
        "Central Tax",
        "State Tax",
        "Integrated Tax",
        "Cess",
        "TDS",
        "N/A"
    };

    public void Show(Account account)
    {
        EditModel = account != null ? new Account
            {
                AccountId = account.AccountId,
                AccountCompanyId = account.AccountCompanyId,
                AccountAddedByUserId = account.AccountAddedByUserId,
                AccountUpdatedByUserId = account.AccountUpdatedByUserId,
                AccountCode = account.AccountCode,
                AccountName = account.AccountName,
                AccountPrintName = account.AccountPrintName,
                AccountGroupId = account.AccountGroupId,
                AccountTypeId = account.AccountTypeId,
                AccountContactPerson = account.AccountContactPerson,
                AccountMobile = account.AccountMobile,
                AccountEmail = account.AccountEmail,
                AccountAddress1 = account.AccountAddress1,
                AccountCity = account.AccountCity,
                AccountStateId = account.AccountStateId,
                AccountGstNo = account.AccountGstNo,
                AccountPan = account.AccountPan,
                AccountStatus = account.AccountStatus,
                AccountMethod = account.AccountMethod,
                AccountRegisterType = account.AccountRegisterType,
                AccountIsSez = account.AccountIsSez,
                AccountCreated = account.AccountCreated
            } : new Account();

        Title = account?.AccountId > 0 ? "Edit Account" : "Add Account";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        stateList = await StateService.GetStatesAsync();
        countryList = await CountryService.GetAllAsync();
        groupList = await AccountGroupService.GetAllAsync();   // API से load
        typeList = await AccountTypeService.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            if (EditModel.AccountId == 0)
            {
                var result = await AccountService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Account created successfully!");
                else
                {
                    ToastService.Error("Account failed to create!");
                    return;
                }
            }
            else
            {
                var result = await AccountService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Account updated successfully!");
                else
                {
                    ToastService.Error("Account failed to update!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving account: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
