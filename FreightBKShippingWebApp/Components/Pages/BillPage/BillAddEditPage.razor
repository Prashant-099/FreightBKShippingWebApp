@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Models
@using FreightBKShippingWebApp.Services
@using DevExpress.Blazor
@inject BillService BillService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject VoucherService VoucherService
@inject AccountService AccountService
@inject LocationService LocationService
@inject NotifyService NotifyService
@inject CargoService CargoService
@inject CurrencyService CurrencyService
@inject VesselService VesselService
@inject ServiceService ServiceService
@inject UnitService UnitService
@inject HsnSacService HsnSacService
@inject GstSlabService GstSlabService
@inject StateService StateService
@inject CompanyService CompanyService
@inject RateMasterService RateMasterService
@inject YearStatechangeService YearStatechangeService
@inject BranchService BranchService
@inject JobService JobService
@inject ReportDataService ReportDataService
@inject ReportService ReportService
@inject ConfirmationDialogService ConfirmDialogService
@inject NavigationManager Navigation
@inject GridLayoutService GridLayoutService
<style>
    .layout-toolbar {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

        .layout-toolbar label {
            font-weight: 600;
            margin-right: 4px;
        }
    .popup-footer {
        position: sticky;
        bottom: 0;
        background-color: #fff; /* or use your popup background color */
        padding: 10px 20px;
        text-align: right;
        border-top: 1px solid #ddd;
        z-index: 100;
    }
    .popup-footer2 {
        position: sticky;
        bottom: 0;
        background-color: #fff; /* or use your popup background color */
        text-align: right;
        border-top: 1px solid #ddd;
        z-index: 100;
    }
    .grid-container {
        background: #fff;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        padding: 10px;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 6px;
        margin-bottom: 8px;
         margin-top: 8px;
    }

    .bill-footer {
        background-color: #f5f8fb;
        min-height: 48px;
    }

    .total-amount-box {
        background-color: #ccf6ff !important; /* light cyan like in your image */
        font-weight: bold;
    }
    .jobdetails{
    margin-top: 6px;
    }

    .jobdetailslabel {
        padding-top: 6px;
    }
</style>

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" CloseOnOutsideClick="false" MaxWidth="1700px" Width="90%"
         horizontalAlignment="HorizontalAlignment.Center"
         verticalAlignment="VerticalAlignment.Center" scrollable="true">

    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxbill">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Bill Type" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxComboBox TData="Voucher" TValue="int"
                                Data="@VoucherList"
                                TextFieldName="VoucherName"
                                ValueFieldName="VoucherId"
                                AllowUserInput="true"
                                NullText="-- Select Account --"
                                Value="@EditModel.BillVoucherId"
                                ValueChanged="@((int voucherId) => OnvoucherChanged(EditModel, voucherId))"
                                ValueExpression="@( () => EditModel.BillVoucherId )"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill No" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BillNo" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill Date" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.BillDate" Format="dd-MM-yyyy" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill Due Date" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.BillDueDate" Format="dd-MM-yyyy" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Job Type" ColSpanMd="3">
                <DxComboBox Data="@JobTypeList"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" 
                             Value="@EditModel.BillJobType"
                                ValueChanged="@((string jobtype) => OnJobTypeChanged( jobtype))"
                                ValueExpression="@( () => EditModel.BillJobType )"/>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Job No" ColSpanMd="3">
                <DxComboBox Data="@FilteredJobList"
                            TextFieldName="JobNo"
                            ValueFieldName="JobNo"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith"
                             Value="@EditModel.BillJobNo"
                            ValueChanged="@((string jobno) => OnJobDetailsChanged(jobno))"
                                ValueExpression="@( () => EditModel.BillJobNo )"/>
            </DxFormLayoutItem>
          
            <DxFormLayoutItem Caption="Supply Type" ColSpanMd="3">
                <DxComboBox Data="@SupplyTypeList"
                            @bind-Value="EditModel.BillSupplyType"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Place of Supply" ColSpanMd="3">

                <DxComboBox TData="State" TValue="int"
                            Data="@stateList"
                            TextFieldName="StateName"
                            ValueFieldName="StateId"
                            ClearButtonVisible="true"
                            AllowUserInput="true"
                            NullText="-- Select POS --"
                            @bind-Value="EditModel.BillPlaceOfSupply"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Party Name" ColSpanMd="4">
                <ChildContent Context="ctx">
                    <DxComboBox TData="Account" TValue="int"
                                Data="@AccountList"
                                TextFieldName="AccountName"
                                ValueFieldName="AccountId"
                                ClearButtonVisible="true"
                                AllowUserInput="false"
                                NullText="-- Select Account --"
                                @bind-Value="EditModel.BillPartyId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>
             <DxFormLayoutItem Caption="Branch" ColSpanMd="3">
            <DxComboBox Data="@branchList"
                        TextFieldName="BranchName"
                        ValueFieldName="BranchId"
                        @bind-Value="EditModel.BillBranchId"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Is RCM Applicable" ColSpanMd="4">
            <DxCheckBox @bind-Checked="EditModel.BillIsRcm"  />
            </DxFormLayoutItem>

        </DxFormLayout>

        <DxFormLayout>
           
                <DxFormLayoutTabPages>
                    <DxFormLayoutTabPage Caption="Service Details">

                        @* 
                <div class="grid-container">
                    <!-- Action Buttons Row -->
                    <div class="action-buttons">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                @onclick="AddNewDetailRow">
                            <i class="bi bi-plus"></i> Add Row
                        </button>
                        <button type="button"
                                class="btn btn-secondary btn-sm"
                                @onclick="ClearAllRows">
                            <i class="bi bi-trash"></i> Clear All
                        </button>
                    </div>


                                <DxGrid Data="@BillDetails"
                                    TItem="BillDetails"
                            @ref="DetailGrid"
                            KeyFieldName="SNo"
                            EditMode="GridEditMode.EditCell"
                            ShowAddNewButton="false"
                            EditNewRowPosition="GridEditNewRowPosition.Top"
                            EditOnKeyPress="true"
                            PageSize="20">

                        <Columns>
                            <!-- Serial Number -->
                            <DxGridDataColumn FieldName="SNo"
                                              Caption="SNo"
                                              Width="60px" />

                            <!-- Action Buttons Column -->
                            <DxGridCommandColumn Width="120px">
                                <HeaderCaptionTemplate>Actions</HeaderCaptionTemplate>
                                <CellDisplayTemplate>
                                    @{
                                                    var rowIndex = BillDetails.FindIndex(x => x.SNo == ((BillDetail)context.DataItem).SNo);
                                    }
                                    <div class="btn-group btn-group-sm">
                                        <button type="button"
                                                class="btn btn-success btn-sm btn-action"
                                                @onclick="() => AddRowAfter(rowIndex)"
                                                title="Add Row">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                        <button type="button"
                                                class="btn btn-danger btn-sm btn-action"
                                                @onclick="() => RemoveRow(rowIndex)"
                                                title="Remove Row">
                                            <i class="bi bi-x"></i>
                                        </button>
                                        <button type="button"
                                                class="btn btn-info btn-sm btn-action"
                                                @onclick="() => SearchProduct(rowIndex)"
                                                title="Search Product">
                                            <i class="bi bi-search"></i>
                                        </button>
                                    </div>
                                </CellDisplayTemplate>
                            </DxGridCommandColumn>

                            <!-- Select Item -->
                                    <DxGridDataColumn FieldName="BillDetailProductId" Caption="Select Item" Width="200px">
                                <EditSettings>
                                            <DxComboBoxSettings Data="@ServiceList"
                                                                ValueFieldName="ServiceId"
                                                                TextFieldName="ServiceName" />
                                </EditSettings>
                            </DxGridDataColumn>

                          


                        </Columns>

                        <!-- Summary Row -->
                        <TotalSummary>
                            @* <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="Quantity"
                                               DisplayText="Total Qty: {0:N2}" />
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="Amount"
                                               DisplayText="Total: ₹{0:N2}" />
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="FinalAmount"
                                               DisplayText="Net Total: ₹{0:N2}" />
                        </TotalSummary>

                    </DxGrid>
                    </div> *@


                    
                        <DxGrid Data="@BillDetails"
                                TItem="BillDetail"
                                @ref="DetailGrid"
                                KeyFieldName="SNo"
                                EditMode="GridEditMode.EditCell"
                                EditOnKeyPress="true"
                                ShowAddNewButton="false"
                                EditModelSaving="Grid_EditModelSaving"
                                CustomizeElement="Grid_CustomizeElement"
                                CustomizeEditModel="Grid_CustomizeEditModel"
                                ShowFilterRow="false"
                                ShowGroupPanel="false"
                            ColumnResizeMode="GridColumnResizeMode.NextColumn" TextWrapEnabled="false"
                            ColumnResizing="Grid_ColumnResizing" PageSize="10">
                        <ToolbarTemplate Context="gridToolbarContext">
                            <DxToolbar>
                                
                                <Items>

                                    <DxToolbarItem Text="Add Row" IconCssClass="bi bi-plus" RenderStyle="ButtonRenderStyle.Success" Click="New_Click" />
                                    <DxToolbarItem Type="Spacer" />
                                    <DxToolbarItem Text="Clear All" IconCssClass="bi bi-trash" RenderStyle="ButtonRenderStyle.Danger" Click="Revert_Click" />
                                    <DxToolbarItem Type="Spacer" />
                                    <DxToolbarItem Text="" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="bi bi-list-columns" Click="ColumnChooserButton_Click" />
                                    <DxToolbarItem BeginGroup="true">
<ChildContent Context="tb">
                                        <div class="d-flex align-items-center gap-2 ms-3">
                                            <label class="mb-0">Layout:</label>
                                            <DxComboBox Data="@availableGridLayouts"
                                                        Value="@selectedGridLayoutId"
                                                        ValueExpression="@(() => selectedGridLayoutId)"
                                                        ValueChanged="@((int? value) => OnGridLayoutSelectedAsync(value))"
                                                        ValueFieldName="GridLayoutId"
                                                        TextFieldName="GridLayoutName"
                                                        NullText="-- Default --"
                                                        Width="180px"
                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />

                                            <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                    @onclick="ShowSaveGridLayoutDialog"
                                                    
                                                    title="Save Current Layout">
                                                <i class="bi bi-floppy"></i>
                                            </DxButton>

                                                <DxButton RenderStyle="ButtonRenderStyle.Success"
                                                          @onclick="ShowNewGridLayoutDialog"
                                                    title="Create New Layout">
                                                <i class="bi bi-plus-square"></i>
                                            </DxButton>

                                            @if (selectedGridLayoutId.HasValue)
                                            {
                                                    <DxButton RenderStyle="ButtonRenderStyle.Danger" @onclick="DeleteCurrentGridLayout" title="Delete Layout">
                                                    <i class="bi bi-trash"></i>
                                                </DxButton>
                                            }

                                        </div>
                                        </ChildContent>
                                    </DxToolbarItem>
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>

                                <!-- Action Buttons Column -->
                            <DxGridCommandColumn Width="@($"{GetGridColumnWidth("Actions")}px")"  NewButtonVisible="false" Visible="@GetGridColumnVisibility("Actions")">
                                    <HeaderCaptionTemplate>Actions</HeaderCaptionTemplate>
                                    <CellDisplayTemplate>
                                        @{
                                            var rowIndex = BillDetails.FindIndex(x => x.SNo == ((BillDetail)context.DataItem).SNo);
                                        }
                                         <div class="btn-group btn-group-sm">
                                            @* <button type="button"
                                                    class="btn btn-success btn-sm btn-action"
                                                    @onclick="() => AddRowAfter(rowIndex)"
                                                    title="Add Row">
                                                <i class="bi bi-plus"></i>
                                            </button> *@
                                            <button type="button"
                                                    class="btn btn-danger btn-sm btn-action"
                                                    @onclick="@(() => DeleteDataItem(context.DataItem))"
                                                    title="Remove Row">
                                                <i class="bi bi-x"></i>
                                            </button>
                                            @* <button type="button"
                                                    class="btn btn-info btn-sm btn-action"
                                                    @onclick="() => SearchProduct(rowIndex)"
                                                    title="Search Product">
                                                <i class="bi bi-search"></i>
                                            </button> *@
                                        </div>
                                    </CellDisplayTemplate>
                                     <!-- Is RCM Applicable -->
             

                                </DxGridCommandColumn>

                            <DxGridDataColumn FieldName="SNo" Caption="SNo" Width="@($"{GetGridColumnWidth("SNo")}px")" ReadOnly="true" Visible="@GetGridColumnVisibility("SNo")" />

                            <DxGridDataColumn FieldName="BillDetailProductId" Caption="Service Name" Width="200px" Visible="@GetGridColumnVisibility("BillDetailProductId")">
                                <EditSettings>
                                        <DxComboBoxSettings Data="@ServiceList"
                                                            TextFieldName="ServiceName"
                                                            ValueFieldName="ServiceId"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                        SearchMode="ListSearchMode.AutoSearch"
                                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                                    </EditSettings>
                                </DxGridDataColumn>

                            <DxGridDataColumn FieldName="BillDetailHsnCode" Caption="SAC" Width="100px" ReadOnly="true" Visible="@GetGridColumnVisibility("BillDetailHsnCode")" />
                            <DxGridDataColumn FieldName="BillDetailUnit" Caption="Unit" Width="80px" ReadOnly="true" Visible="@GetGridColumnVisibility("BillDetailUnit")" />
                            <DxGridDataColumn FieldName="BillDetailRate" Caption="Rate" Width="100px" Visible="@GetGridColumnVisibility("BillDetailRate")" />
                            <DxGridDataColumn FieldName="BillDetailQty" Caption="Qty" Width="100px" Visible="@GetGridColumnVisibility("BillDetailQty")" />
                            <DxGridDataColumn FieldName="BillDetailAmount" Caption="Amount" Width="120px" ReadOnly="true" Visible="@GetGridColumnVisibility("BillDetailAmount")" />
                            <DxGridDataColumn FieldName="BillDetailExchRate" Caption="Ex. Rate" Width="100px" Visible="@GetGridColumnVisibility("BillDetailExchRate")" />

                            <DxGridDataColumn FieldName="BillDetailCurrencyId" Caption="Curr." Width="80px" Visible="@GetGridColumnVisibility("BillDetailCurrencyId")">
                                    <EditSettings>
                                        <DxComboBoxSettings Data="@CurrList"
                                                            TextFieldName="CurrencyName"
                                                            ValueFieldName="CurrencyId" />
                                    </EditSettings>
                                </DxGridDataColumn>

                            <DxGridDataColumn FieldName="BillDetailTaxableAmt" Caption="Taxable" Width="100px" Visible="@GetGridColumnVisibility("BillDetailTaxableAmt")" />
                            <DxGridDataColumn FieldName="Taxcode" Caption="Tax Code" Width="100px" Visible="@GetGridColumnVisibility("Taxcode")" />
                            <DxGridDataColumn FieldName="BillDetailIgstPer" Caption="IGST %" Width="80px" Visible="@GetGridColumnVisibility("BillDetailIgstPer")" />
                            <DxGridDataColumn FieldName="BillDetailIgst" Caption="IGST" Width="80px" Visible="@GetGridColumnVisibility("BillDetailIgst")" />
                            <DxGridDataColumn FieldName="BillDetailCgstPer" Caption="CGST %" Width="80px" Visible="@GetGridColumnVisibility("BillDetailCgstPer")" />
                            <DxGridDataColumn FieldName="BillDetailCgst" Caption="CGST" Width="80px" Visible="@GetGridColumnVisibility("BillDetailCgst")" />
                            <DxGridDataColumn FieldName="BillDetailSgstPer" Caption="SGST %" Width="80px" Visible="@GetGridColumnVisibility("BillDetailSgstPer")" />
                            <DxGridDataColumn FieldName="BillDetailSgst" Caption="SGST" Width="80px" Visible="@GetGridColumnVisibility("BillDetailSgst")" />
                            <DxGridDataColumn FieldName="BillDetailTotal" Caption="Total" Width="120px" ReadOnly="true" Visible="@GetGridColumnVisibility("BillDetailTotal")" />


                            </Columns>

                            <TotalSummary>
                                <DxGridSummaryItem FieldName="BillDetailAmount" SummaryType="GridSummaryItemType.Sum" DisplayText="Total: {0:N2}" />
                            <DxGridSummaryItem FieldName="BillDetailIgst" SummaryType="GridSummaryItemType.Sum" />
                            <DxGridSummaryItem FieldName="BillDetailCgst" SummaryType="GridSummaryItemType.Sum"  />
                            <DxGridSummaryItem FieldName="BillDetailSgst" SummaryType="GridSummaryItemType.Sum" />
                                <DxGridSummaryItem FieldName="BillDetailTotal" SummaryType="GridSummaryItemType.Sum" DisplayText="Grand Total: {0:N2}"/>
                     
                            </TotalSummary>
                        </DxGrid>

                       @* <div class="mt-2 d-flex justify-content-between align-items-center border-top pt-2">
                            <div class="w-75">xccccccccccc 
                                <label>Remarks</label>
                                <DxTextBox @bind-Text="EditModel.BillRemarks" Width="100%" />
                          
                            </div>
                            <div class="text-end pe-3">
                            <label >Branch</label>
                            <DxComboBox Data="@branchList"
                                        TextFieldName="BranchName"
                                        ValueFieldName="BranchId"
                                        @bind-Value="EditModel.BillBranchId"></DxComboBox>
                               
                            </div>
                        <div class="text-end pe-3">
                            <label>is RCM Applicable</label>
                            <DxCheckBox @bind-Checked="EditModel.BillIsRcm" Text="is RCM Applicable" />

                        </div>
                        <div class="text-end pe-3">
                            <label>is Round Off</label>
                            <DxCheckBox @bind-Checked="EditModel.BillIsRoundOff" Text="is Round Off" />

                        </div>
                        <div class="text-end pe-3">
                            <label class="fw-bold me-2">Total Amount:</label>
                            <DxSpinEdit @bind-Value="EditModel.BillNetAmount" ReadOnly="true" Format="N2" Width="150px" />
                        </div>
                        </div> *@
                    



                    </DxFormLayoutTabPage>
                    <DxFormLayoutTabPage Caption="Job Details">
        <DxFormLayout>
                   

                        <DxFormLayoutItem Caption="POL" ColSpanMd="3" CssClass="jobdetailslabel">
                            <DxComboBox TData="Location" TValue="int"
                                        Data="@locationList"
                                        TextFieldName="LocationName"
                                        ValueFieldName="LocationId"
                                        AllowUserInput="true"
                                        NullText="-- Select POL --"
                                        @bind-Value="EditModel.BillPolId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith"  CssClass="jobdetails"/>
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Consignee" ColSpanMd="3" CssClass="jobdetailslabel">
                            <DxComboBox TData="Notify" TValue="int"
                                        Data="@ConsigneeList"
                                        TextFieldName="NotifyName"
                                        ValueFieldName="NotifyId"
                                        AllowUserInput="true"
                                        NullText="-- Select Consignee --"
                                        @bind-Value="EditModel.BillConsigneeId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith"  CssClass="jobdetails"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="SB/BE No" ColSpanMd="2" CssClass="jobdetailslabel">
                            <DxTextBox @bind-Text="EditModel.BillSbNo"  CssClass="jobdetails"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Date" ColSpanMd="2" CssClass="jobdetailslabel">
                            <DxDateEdit @bind-Date="EditModel.BillSbDate" CssClass="jobdetails" Format="dd-MM-yyyy" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="QTY" ColSpanMd="2" CssClass="jobdetailslabel">
                            <DxSpinEdit @bind-Value="EditModel.BillQty" ShowSpinButtons="false" CssClass="jobdetails" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="POD" ColSpanMd="3">
                            <DxComboBox TData="Location" TValue="int"
                                        Data="@locationList"
                                        TextFieldName="LocationName"
                                        ValueFieldName="LocationId"
                                        AllowUserInput="true"
                                        NullText="-- Select POD --"
                                        @bind-Value="EditModel.BillPodId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Cargo" ColSpanMd="3">
                            <DxComboBox TData="Cargo" TValue="int"
                                        Data="@CargoList"
                                        TextFieldName="CargoName"
                                        ValueFieldName="CargoId"
                                        AllowUserInput="true"
                                        NullText="-- Select Cargo --"
                                        @bind-Value="EditModel.BillCargoId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="BL No" ColSpanMd="2">
                            <DxTextBox @bind-Text="EditModel.BillBlNo" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Date" ColSpanMd="2">
                            <DxDateEdit @bind-Date="EditModel.BillBlDate" Format="dd-MM-yyyy" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Gross WT" ColSpanMd="2">
                            <DxSpinEdit @bind-Value="EditModel.BillGrossWt" ShowSpinButtons="false" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Vessel" ColSpanMd="3">
                            <DxComboBox TData="Vessel" TValue="int"
                                        Data="@VesselList"
                                        TextFieldName="VesselName"
                                        ValueFieldName="VesselId"
                                        AllowUserInput="true"
                                        NullText="-- Select Vessel --"
                                        @bind-Value="EditModel.BillVesselId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Shipper" ColSpanMd="3">
                            <DxComboBox TData="Notify" TValue="int"
                                        Data="@ShipperList"
                                        TextFieldName="NotifyName"
                                        ValueFieldName="NotifyId"
                                        AllowUserInput="true"
                                        NullText="-- Select Shipper --"
                                        @bind-Value="EditModel.BillShipperId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="S.Inv." ColSpanMd="2">
                            <DxTextBox @bind-Text="EditModel.BillShipperInvNo" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Date" ColSpanMd="2">
                            <DxDateEdit @bind-Date="EditModel.BillShipperInvDate"  Format="dd-MM-yyyy"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Net WT" ColSpanMd="2">
                            <DxSpinEdit @bind-Value="EditModel.BillNetWt" ShowSpinButtons="false" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Line" ColSpanMd="3">
                            <DxComboBox TData="Notify" TValue="int"
                                        Data="@LineList"
                                        TextFieldName="NotifyName"
                                        ValueFieldName="NotifyId"
                                        AllowUserInput="true"
                                        NullText="-- Select Line --"
                                        @bind-Value="EditModel.BillLineId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Cont 20 FT" ColSpanMd="2">
                            <DxTextBox @bind-Text="EditModel.Bill20Ft" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Cont 40 FT" ColSpanMd="2">
                            <DxTextBox @bind-Text="EditModel.Bill40Ft" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Ex. Rate" ColSpanMd="3">
                            <div class="d-flex gap-1">
                                <DxComboBox TData="Currency" TValue="int"
                                            Data="@CurrList"
                                            TextFieldName="CurrencyName"
                                            ValueFieldName="CurrencyId"
                                            AllowUserInput="true"
                                            NullText="-- Select Currency --"
                                            @bind-Value="EditModel.BillDefaultCurrencyId"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                                <DxSpinEdit @bind-Value="EditModel.BillExchRate" ShowSpinButtons="false" />
                            </div>
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="HBL No" ColSpanMd="2">
                            <DxTextBox @bind-Text="EditModel.BillHblNo" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="CBM" ColSpanMd="2">
                            <DxSpinEdit @bind-Value="EditModel.BillCbmQty" ShowSpinButtons="false" />
                        </DxFormLayoutItem>
                    
        </DxFormLayout>
                        </DxFormLayoutTabPage>
                    <DxFormLayoutTabPage Caption="Extra Details">
                        <DxFormLayout>
                        <DxFormLayoutGroup Caption="Shipping Address" ColSpanMd="5">
                            <DxFormLayoutItem Caption="Party Name" ColSpanMd="12">
                                    <DxComboBox TData="Account" TValue="int"
                                                Data="@AccountList"
                                                TextFieldName="AccountName"
                                                ValueFieldName="AccountId"
                                                ClearButtonVisible="true"
                                                AllowUserInput="false"
                                                NullText="-- Select Account --"
                                                Value="@EditModel.BillShipPartyId"
                                ValueChanged="@((int shippartyId) => shippartydetails(shippartyId))"
                                ValueExpression="@( () => EditModel.BillShipPartyId )"
                                                SearchMode="ListSearchMode.AutoSearch"
                                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Address" ColSpanMd="12">
                                <DxMemo @bind-Text="EditModel.BillAddress1" />
                            </DxFormLayoutItem>

                            
                            <DxFormLayoutItem Caption="Mob No." ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.BillContactNo" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="GSTIN No." ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.BillGstNo" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="PIN" ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.BillPincode" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="City" ColSpanMd="6">
                                <DxTextBox @bind-Text="EditModel.BillCity" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="State" ColSpanMd="12">
                                <DxComboBox TData="State" TValue="int"
                                            Data="@stateList"
                                            TextFieldName="StateName"
                                            ValueFieldName="StateId"
                                            AllowUserInput="true"
                                            NullText="-- Select POS --"
                                            @bind-Value="EditModel.BillStateId"
                                            SearchMode="ListSearchMode.AutoSearch"
                                            SearchFilterCondition="ListSearchFilterCondition.StartsWith"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                            </DxFormLayoutItem>

                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Caption="Custom  Field" ColSpanMd="3">
                            <DxFormLayoutItem Caption="ETD" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.BillCust1" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="ETA" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.BillCust2" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="Job no(Manual)" ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.BillCust3" />
                            </DxFormLayoutItem>

                        </DxFormLayoutGroup>
                    

                         <DxFormLayoutGroup Caption="E-Invoice Info" ColSpanMd="4">
                        <DxFormLayoutItem Caption="IRN No" ColSpanMd="12">
                            <DxTextBox @bind-Text="EditModel.BillIrnNo" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="ACK No" ColSpanMd="12">
                            <DxTextBox @bind-Text="EditModel.BillAckNo" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="ACK Date " ColSpanMd="12">
                                <DxTextBox @bind-Text="EditModel.BillAckDate" />
                        </DxFormLayoutItem>

                            
                         </DxFormLayoutGroup>
                       

                    </DxFormLayout>
                     
                   
                        <DxFormLayoutItem Caption="Goods Description" ColSpanMd="12">
                            <DxMemo @bind-Text="EditModel.BillRemarksDefault" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Container No. " ColSpanMd="12">
                            <DxMemo @bind-Text="EditModel.BillContainerNo" />
                        </DxFormLayoutItem>
                    





                    </DxFormLayoutTabPage>
                </DxFormLayoutTabPages>
            
        </DxFormLayout>
        <div class="popup-footer2">
             <DxFormLayout>
                 
            <div class="d-flex gap-1">
                    <DxFormLayoutItem Caption="Remarks" ColSpanMd="9">
                    
                    <DxMemo @bind-Text="EditModel.BillRemarks" Width="100%" />
              </DxFormLayoutItem>
               
                   
              
               
               
                <DxFormLayoutItem Caption="Is Round Off" ColSpanMd="4">
                     <div class="d-flex gap-1">
                    <DxCheckBox @bind-Checked="EditModel.BillIsRoundOff" Text="Is Round Off" />
                   
                    <DxSpinEdit @bind-Value="EditModel.BillRoundAmt"
                                Format="N2"
                                Width="80px"
                                CssClass="ms-1"
                                NullText="0.00" />
                                </div>
                    </DxFormLayoutItem>

               <DxFormLayoutItem Caption="Total Amount" ColSpanMd="4">
                    
                    <DxSpinEdit @bind-Value="EditModel.BillNetAmount"
                                ReadOnly="true"
                                Format="N2"
                                Width="100px"
                                CssClass="total-amount-box" />
                    </DxFormLayoutItem>
              
            </div>
            
            </DxFormLayout>
        </div>
        <div class="popup-footer">
             <div class="d-flex gap-1">
                <label class="fw-bold me-2">Bank:</label>
                    <DxComboBox TData="Account" TValue="int"
                                Data="@BankList"
                                TextFieldName="AccountName"
                                ValueFieldName="AccountId"
                                AllowUserInput="true"
                                NullText="-- Select Bank --"
                                @bind-Value="EditModel.BillBankId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                <label class="fw-bold me-2">Print Report:</label>
                    <DxComboBox TData="ReportData" TValue="int"
                                Data="@ReportDataList"
                                TextFieldName="FormatName"
                                ValueFieldName="ReportDataId"
                                AllowUserInput="true"
                                NullText="-- Select Report --"
                                @bind-Value="EditModel.BillReportId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
             <div class="me-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
                </div>
            </div>
        </div>
       
    </EditForm>
    <ConfirmationDialog />
    @if (showGridLayoutDialog)
    {
        <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5); z-index: 10000;" @onclick="@(() => { })">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title">@gridLayoutDialogTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseGridLayoutDialog" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">

                        <div class="mb-3">
                            <label class="form-label fw-bold">Layout Name:</label>
                            <input type="text"
                                   class="form-control"
                                   @bind="newGridLayoutName"
                                   @bind:event="oninput"
                                   placeholder="Enter layout name..."
                                   maxlength="100" />
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       @bind="isDefaultGridLayout"
                                       id="defaultGridLayoutCheck" />
                                <label class="form-check-label" for="defaultGridLayoutCheck">
                                    Set as Default Layout
                                </label>
                            </div>
                        </div>

                        <div class="mt-3">
                            <label class="form-label fw-bold mb-2">Visible Columns:</label>
                            <div class="row g-2">
                                @foreach (var col in allGridColumns)
                                {
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   @bind="col.Visible"
                                                   id="gridcol_@col.FieldName" />
                                            <label class="form-check-label" for="gridcol_@col.FieldName">
                                                @col.Caption
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseGridLayoutDialog">
                            Cancel
                        </button>

                        <button type="button" class="btn btn-primary" @onclick="SaveCurrentGridLayout">
                            <i class="bi bi-floppy me-1"></i>
                            @(isEditGridLayoutMode ? "Update" : "Create") Layout
                        </button>
                    </div>

                </div>
            </div>
        </div>
    }

</DxPopup>

@code {
    // Grid Layout Management Variables
    private List<GridLayoutDto> availableGridLayouts = [];
    private int? selectedGridLayoutId;
    private bool showGridLayoutDialog = false;
    private string newGridLayoutName = "";
    private string gridLayoutDialogTitle = "";
    private bool isEditGridLayoutMode = false;
    private bool isDefaultGridLayout = false;
    private const string GRID_VOUCHER_TYPE = "BillDetail";

    private List<GridColumnLayout> allGridColumns = [];
    private List<GridColumnLayout> currentGridLayout = [];

    // Add this method to capture column width changes
    // Replaced the unavailable DevExpress event args type with a loose handler using dynamic.
    private void Grid_ColumnResizing(object args)
    {
        try
        {
            dynamic e = args;
            string fieldName = e?.Column?.FieldName;
            int width = 0;

            try
            {
                // Try direct cast first, fall back to Convert if necessary.
                width = (int)e.Width;
            }
            catch
            {
                try { width = Convert.ToInt32(e.Width); } catch { width = 0; }
            }

            if (!string.IsNullOrEmpty(fieldName))
            {
                var allCol = allGridColumns.FirstOrDefault(c => c.FieldName == fieldName);
                if (allCol != null)
                    allCol.Width = width;

                var currentCol = currentGridLayout.FirstOrDefault(c => c.FieldName == fieldName);
                if (currentCol != null)
                    currentCol.Width = width;
            }
        }
        catch
        {
            // Best-effort: silently ignore if runtime shape is different.
        }
    }

    // Enhanced InitializeGridColumns with proper width values
    private void InitializeGridColumns()
    {
        allGridColumns = new List<GridColumnLayout>
    {
        new() { FieldName = "Actions", Caption = "Actions", Visible = true, Width = 120, DisplayIndex = 0 },
        new() { FieldName = "SNo", Caption = "SNo", Visible = true, Width = 60, DisplayIndex = 1 },
        new() { FieldName = "BillDetailProductId", Caption = "Service Name", Visible = true, Width = 200, DisplayIndex = 2 },
        new() { FieldName = "BillDetailHsnCode", Caption = "SAC", Visible = true, Width = 100, DisplayIndex = 3 },
        new() { FieldName = "BillDetailUnit", Caption = "Unit", Visible = true, Width = 80, DisplayIndex = 4 },
        new() { FieldName = "BillDetailRate", Caption = "Rate", Visible = true, Width = 100, DisplayIndex = 5 },
        new() { FieldName = "BillDetailQty", Caption = "Qty", Visible = true, Width = 100, DisplayIndex = 6 },
        new() { FieldName = "BillDetailAmount", Caption = "Amount", Visible = true, Width = 120, DisplayIndex = 7 },
        new() { FieldName = "BillDetailExchRate", Caption = "Ex. Rate", Visible = true, Width = 100, DisplayIndex = 8 },
        new() { FieldName = "BillDetailCurrencyId", Caption = "Curr.", Visible = true, Width = 80, DisplayIndex = 9 },
        new() { FieldName = "BillDetailTaxableAmt", Caption = "Taxable", Visible = true, Width = 100, DisplayIndex = 10 },
        new() { FieldName = "Taxcode", Caption = "Tax Code", Visible = true, Width = 100, DisplayIndex = 11 },
        new() { FieldName = "BillDetailIgstPer", Caption = "IGST %", Visible = true, Width = 80, DisplayIndex = 12 },
        new() { FieldName = "BillDetailIgst", Caption = "IGST", Visible = true, Width = 80, DisplayIndex = 13 },
        new() { FieldName = "BillDetailCgstPer", Caption = "CGST %", Visible = true, Width = 80, DisplayIndex = 14 },
        new() { FieldName = "BillDetailCgst", Caption = "CGST", Visible = true, Width = 80, DisplayIndex = 15 },
        new() { FieldName = "BillDetailSgstPer", Caption = "SGST %", Visible = true, Width = 80, DisplayIndex = 16 },
        new() { FieldName = "BillDetailSgst", Caption = "SGST", Visible = true, Width = 80, DisplayIndex = 17 },
        new() { FieldName = "BillDetailTotal", Caption = "Total", Visible = true, Width = 120, DisplayIndex = 18 }
    };
        currentGridLayout = allGridColumns.Select(c => new GridColumnLayout
        {
            FieldName = c.FieldName,
            Caption = c.Caption,
            Visible = c.Visible,
            Width = c.Width,
            DisplayIndex = c.DisplayIndex
        }).ToList();
    }

    // Enhanced GetGridColumnWidth method
    private int GetGridColumnWidth(string fieldName)
    {
        if (currentGridLayout == null || !currentGridLayout.Any())
        {
            var defaultCol = allGridColumns.FirstOrDefault(x => x.FieldName == fieldName);
            return defaultCol?.Width ?? 100;
        }

        var col = currentGridLayout.FirstOrDefault(x => x.FieldName == fieldName);
        return col?.Width ?? 100;
    }
    private bool GetGridColumnVisibility(string fieldName)
    {
        // Check if we have a current layout
        if (currentGridLayout == null || !currentGridLayout.Any())
        {
            return true; // Show all columns if no layout
        }

        var col = currentGridLayout.FirstOrDefault(x => x.FieldName == fieldName);
        return col?.Visible ?? true; // Default to visible if not found
    }

    private async Task LoadAvailableGridLayouts()
    {
        availableGridLayouts = await GridLayoutService.GetLayoutsByVoucherTypeAsync(GRID_VOUCHER_TYPE);
    }

    private async Task LoadDefaultGridLayout()
    {
        var defaultLayout = await GridLayoutService.GetDefaultLayoutAsync(GRID_VOUCHER_TYPE);
        if (defaultLayout != null)
        {
            selectedGridLayoutId = defaultLayout.GridLayoutId;
            await ApplyGridLayout(defaultLayout);
        }
    }

    private async Task OnGridLayoutSelectedAsync(int? layoutId)
    {
        selectedGridLayoutId = layoutId;

        if (layoutId.HasValue)
        {
            var layout = await GridLayoutService.GetByIdAsync(layoutId.Value);
            if (layout != null)
            {
                await ApplyGridLayout(layout);
            }
        }
        else
        {
            // Reset to default when cleared
            InitializeGridColumns();
           // currentGridLayout = allGridColumns.ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    // Enhanced ApplyGridLayout
    private async Task ApplyGridLayout(GridLayoutDto layout)
    {
        if (!string.IsNullOrEmpty(layout.GridLayoutData))
        {
            var savedLayout = GridLayoutService.DeserializeColumnLayout(layout.GridLayoutData);
            if (savedLayout != null && savedLayout.Any())
            {
                // Update current layout with saved configuration
                currentGridLayout = savedLayout.Select(s => new GridColumnLayout
                {
                    FieldName = s.FieldName,
                    Caption = s.Caption,
                    Visible = s.Visible,
                    Width = s.Width,
                    DisplayIndex = s.DisplayIndex
                }).ToList();

                // Sync with allGridColumns for dialog
                foreach (var saved in savedLayout)
                {
                    var existing = allGridColumns.FirstOrDefault(x => x.FieldName == saved.FieldName);
                    if (existing != null)
                    {
                        existing.Visible = saved.Visible;
                        existing.Width = saved.Width;
                        existing.DisplayIndex = saved.DisplayIndex;
                    }
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void ShowSaveGridLayoutDialog()
    {
        if (selectedGridLayoutId.HasValue)
        {
            var layout = availableGridLayouts.FirstOrDefault(x => x.GridLayoutId == selectedGridLayoutId.Value);
            if (layout != null)
            {
                newGridLayoutName = layout.GridLayoutName ?? "";
                isDefaultGridLayout = layout.GridLayoutDefault;
                isEditGridLayoutMode = true;
                gridLayoutDialogTitle = "Update Grid Layout";
                showGridLayoutDialog = true;
                return;
            }
        }

        // If no layout selected, show new dialog
        ShowNewGridLayoutDialog();
    }

    private void ShowNewGridLayoutDialog()
    {
        newGridLayoutName = "";
        isDefaultGridLayout = false;
        isEditGridLayoutMode = false;
        gridLayoutDialogTitle = "Create New Grid Layout";
        showGridLayoutDialog = true;
    }

    // Enhanced SaveCurrentGridLayout
    private async Task SaveCurrentGridLayout()
    {
        if (string.IsNullOrWhiteSpace(newGridLayoutName))
        {
            ToastService.Warning("Please enter a layout name.");
            return;
        }

        LoadingService.Show();
        try
        {
            // Sync currentGridLayout with allGridColumns before saving
            // This ensures any width changes are captured
            foreach (var col in allGridColumns)
            {
                var current = currentGridLayout.FirstOrDefault(c => c.FieldName == col.FieldName);
                if (current != null)
                {
                    current.Visible = col.Visible;
                    current.Width = col.Width;
                    current.DisplayIndex = col.DisplayIndex;
                }
                else
                {
                    currentGridLayout.Add(new GridColumnLayout
                    {
                        FieldName = col.FieldName,
                        Caption = col.Caption,
                        Visible = col.Visible,
                        Width = col.Width,
                        DisplayIndex = col.DisplayIndex
                    });
                }
            }

            var configJson = GridLayoutService.SerializeColumnLayout(currentGridLayout);

            bool success = false;

            if (isEditGridLayoutMode && selectedGridLayoutId.HasValue)
            {
                // Update existing layout
                var updateRequest = new SaveGridLayoutRequest
                {
                    GridLayoutName = newGridLayoutName,
                    GridLayoutVoucherType = GRID_VOUCHER_TYPE,
                    GridLayoutData = configJson,
                    GridLayoutDefault = isDefaultGridLayout
                };
                success = await GridLayoutService.UpdateAsync(selectedGridLayoutId.Value, updateRequest);
            }
            else
            {
                // Create new layout
                var newLayoutRequest = new SaveGridLayoutRequest
                {
                    GridLayoutName = newGridLayoutName,
                    GridLayoutVoucherType = GRID_VOUCHER_TYPE,
                    GridLayoutData = configJson,
                    GridLayoutDefault = isDefaultGridLayout
                };
                var result = await GridLayoutService.CreateAsync(newLayoutRequest);
                success = result;

                if (success)
                {
                    // Reload to get the new layout ID
                    await LoadAvailableGridLayouts();
                    var createdLayout = availableGridLayouts.FirstOrDefault(l => l.GridLayoutName == newGridLayoutName);
                    if (createdLayout != null)
                        selectedGridLayoutId = createdLayout.GridLayoutId;
                }
            }

            if (success)
            {
                ToastService.Success($"Grid layout {(isEditGridLayoutMode ? "updated" : "created")} successfully!");

                // Reload layouts list
                await LoadAvailableGridLayouts();

                // If set as default, reload it
                if (isDefaultGridLayout)
                {
                    await LoadDefaultGridLayout();
                }

                CloseGridLayoutDialog();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                ToastService.Error($"Failed to {(isEditGridLayoutMode ? "update" : "create")} grid layout.");
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving layout: {ex.Message}");
            Console.WriteLine($"Layout save error: {ex}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task DeleteCurrentGridLayout()
    {
        if (!selectedGridLayoutId.HasValue) return;

        var griddeleteconfirm = await ConfirmDialogService.ShowAsync(
            "Are you sure you want to delete this grid layout?");

        if (!griddeleteconfirm) return;

        LoadingService.Show();
        try
        {
            var success = await GridLayoutService.DeleteAsync(selectedGridLayoutId.Value);

            if (success)
            {
                ToastService.Success("Grid layout deleted successfully!");

                // Reset to default
                selectedGridLayoutId = null;
                InitializeGridColumns();
                currentGridLayout = allGridColumns.ToList();

                // Reload available layouts
                await LoadAvailableGridLayouts();

                await InvokeAsync(StateHasChanged);
            }
            else
            {
                ToastService.Error("Failed to delete grid layout.");
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error deleting layout: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private void CloseGridLayoutDialog()
    {
        showGridLayoutDialog = false;
        newGridLayoutName = "";
        isDefaultGridLayout = false;
        isEditGridLayoutMode = false;
    }

























    [Parameter] public EventCallback OnSaved { get; set; }
    void ColumnChooserButton_Click()
    {
        DetailGrid.ShowColumnChooser();
    }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Bill";
    private Bill EditModel { get; set; } = new();
    private IGrid DetailGrid { get; set; }

    private List<BillDetail> BillDetails { get; set; } = new();
    // private List<BillDetail> OriginalDetails { get; set; } = new();
    private Dictionary<BillDetail, DataChange> UnsavedChanges { get; } = new();
    private bool BatchItemsEnabled => UnsavedChanges.Count > 0 || (DetailGrid?.IsEditing() ?? false);

    private int nextSNo = 1;

    // Dropdown lists
    private List<Voucher> VoucherList = new();
    private List<Account> AccountList = new();
    private List<State> stateList = new();
    private List<Location> locationList = new();
    private List<Notify> ConsigneeList = new();
    private List<Notify> ShipperList = new();
    private List<Notify> LineList = new();
    private List<Cargo> CargoList = new();
    private List<Vessel> VesselList = new();
    private List<Currency> CurrList = new();
    private List<Service> ServiceList = new();
    private List<Unit> UnitList = new();
    private List<HsnSac> HsnList = new();
    private List<GstSlab> GstslabList = new();
    private List<Company> CompanyList = new();
    private List<State> StateList = new();
    private List<RateMaster> RateMasterList = new();
    private List<Branch> branchList = new();
    private List<ReportData> ReportDataList = new();
    private List<Account> BankList = new();
    private List<Job> JobList = new();
    private List<Job> FilteredJobList = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadBillsDataAsync();
        InitializeGridColumns();
        await LoadBillsDataAsync();
        await LoadAvailableGridLayouts();
        await LoadDefaultGridLayout();
    }

    private async Task LoadBillsDataAsync()
    {
        LoadingService.Show();
        try
        {
            ServiceList = await ServiceService.GetAllAsync();
            VoucherList = await VoucherService.GetAllAsync();
            stateList = await StateService.GetStatesAsync();
            locationList = await LocationService.GetAllAsync();
            CargoList = await CargoService.GetAllAsync();
            CurrList = await CurrencyService.GetAllAsync();
            VesselList = await VesselService.GetAllAsync();
            UnitList = await UnitService.GetAllAsync();
            HsnList = await HsnSacService.GetAllAsync();
            GstslabList = await GstSlabService.GetAllAsync();
            CompanyList = await CompanyService.GetAllAsync();
            StateList = await StateService.GetStatesAsync();
            RateMasterList = await RateMasterService.GetAllAsync();
            branchList = await BranchService.GetAllAsync();
            ReportDataList = await ReportDataService.GetAllAsync();
            JobList = await JobService.GetAllAsync();
            FilteredJobList = JobList;

            var allNotify = await NotifyService.GetAllAsync();
            ConsigneeList = allNotify.Where(n => n.NotifyType == "CONSIGNEE").ToList();
            ShipperList = allNotify.Where(n => n.NotifyType == "SHIPPER").ToList();
            LineList = allNotify.Where(n => n.NotifyType == "LINE").ToList();

            var allAccounts = await AccountService.GetAllAsync();
            AccountList = allAccounts.Where(a => a.AccountTypeId == 14 || a.AccountTypeId == 18).ToList();
            BankList = allAccounts.Where(a => a.AccountTypeId == 10).ToList();
        }
        finally
        {
            LoadingService.Hide();
        }
    }  
    private void OnJobDetailsChanged(string selectedjobno)
    {
        EditModel.BillJobNo = selectedjobno;
        var selectedjobdetails = JobList.FirstOrDefault(j => j.JobNo == selectedjobno);
        if (selectedjobno != null)
        {
            EditModel.BillPartyId = selectedjobdetails.JobPartyId ?? 0;
            EditModel.BillSupplyType = "B2B";
            EditModel.BillCargoId = selectedjobdetails.JobCargoId ?? 0;
            EditModel.BillShipPartyId = EditModel.BillPartyId;
            EditModel.BillRemarksDefault = selectedjobdetails.JobGoodsDesc ;
            EditModel.BillVesselId = selectedjobdetails.JobVesselId ??0;
            EditModel.BillLineId = selectedjobdetails.JobLineId ??0;
            EditModel.BillDefaultCurrencyId = selectedjobdetails.JobDefCurrId ??0;
            EditModel.BillHblNo = selectedjobdetails.JobHblNo ;
            EditModel.BillShipperInvNo = selectedjobdetails.JobShipperInvNo ;
            EditModel.BillShipperInvDate = selectedjobdetails.JobShipperInvDate ;
            EditModel.BillGrossWt = selectedjobdetails.JobGrossWt ??0;
            EditModel.BillNetWt = selectedjobdetails.JobNetWt??0;
            EditModel.BillQty = selectedjobdetails.JobQty ??0;
            EditModel.BillPolId = selectedjobdetails.JobPolId??0;
            EditModel.BillPodId = selectedjobdetails.JobPodId??0;
            EditModel.BillConsigneeId = selectedjobdetails.JobConsigneeId??0;
            EditModel.BillShipperId = selectedjobdetails.JobShipperId??0;
            EditModel.BillExchRate = selectedjobdetails.JobExchRate??0;
            EditModel.BillCbmQty = selectedjobdetails.JobCbm??0;
            // EditModel.BillCust1 = selectedjobdetails.JobEtd??0;
            //EditModel.BillCust2 = selectedjobdetails.JobEta??0;
            EditModel.Bill20Ft = selectedjobdetails.Job20Ft;
            EditModel.Bill40Ft = selectedjobdetails.Job40Ft;
            EditModel.BillContainerNo = selectedjobdetails.JobContainer20Ft +" , "+selectedjobdetails.JobContainer40Ft;
            EditModel.BillBlNo = selectedjobdetails.JobBlNo;
            EditModel.BillBlDate = selectedjobdetails.JobBlDate;
            EditModel.BillSbNo = selectedjobdetails.JobSbNo;
            EditModel.BillSbDate = selectedjobdetails.JobSbDate;
            EditModel.BillCust3 = selectedjobdetails.JobNo;

            var selectedparty = AccountList.FirstOrDefault(s => s.AccountId == EditModel.BillShipPartyId);
            EditModel.BillAddress1 = selectedparty.AccountAddress1;
            EditModel.BillContactNo = selectedparty.AccountMobile;
            EditModel.BillGstNo = selectedparty.AccountGstNo;
            EditModel.BillPincode = selectedparty.AccountPincode;
            EditModel.BillCity = selectedparty.AccountCity;
            EditModel.BillPlaceOfSupply = selectedparty.AccountStateId??0;
            EditModel.BillStateId = selectedparty.AccountStateId ?? 0;

            var Duedate = selectedparty.AccountCreditDays??30;
            EditModel.BillDueDate = DateTime.Now.AddDays(Duedate);

        }
    }
    private void shippartydetails(int shippartydetails)
    {
        EditModel.BillShipPartyId = shippartydetails;
        var selectedshipparty = AccountList.FirstOrDefault(s => s.AccountId == shippartydetails);
        if (selectedshipparty != null)
        {
            EditModel.BillAddress1 = selectedshipparty.AccountAddress1;
            EditModel.BillContactNo = selectedshipparty.AccountMobile;
            EditModel.BillGstNo = selectedshipparty.AccountGstNo;
            EditModel.BillPincode = selectedshipparty.AccountPincode;
            EditModel.BillCity = selectedshipparty.AccountCity;
            EditModel.BillStateId = selectedshipparty.AccountStateId ?? 0;
        }
    }
    private void OnJobTypeChanged(string selectedType)
    {
        EditModel.BillJobType = selectedType;
        FilteredJobList = JobList
            .Where(j => j.JobType == selectedType) // assuming each job has Type
            .ToList();

        // clear previous selection
    }
    private async Task OnvoucherChanged(Bill model, int? voucherId)
    {
        if (voucherId == null || voucherId == 0)
            return;
        model.BillVoucherId = voucherId.Value;
        if (string.IsNullOrEmpty(model.BillNo) || model.BillId == 0)
        {
            var finYearId = YearStatechangeService.SelectedYearId;
            try
            {
                var result = await YearStatechangeService.GeneratebillNoAsync(voucherId, finYearId);

                model.BillPrefix = result.prefix;
                model.BillNo = result.prefix + result.number + result.suffix;
                model.BillPostfix = result.suffix;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                ToastService.Error("Error: " + ex.Message);
            }
        }

    }

    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    List<SelectItem> JobTypeList = new()
    {
        new SelectItem { Text = "IMPORT", Value = "IMPORT" },
        new SelectItem { Text = "EXPORT", Value = "EXPORT" }
    };

    List<SelectItem> SupplyTypeList = new()
    {
        new SelectItem { Text = "B2B", Value = "B2B" },
        new SelectItem { Text = "B2CS", Value = "B2CS" },
        new SelectItem { Text = "SEZWP", Value = "SEZWP" },
        new SelectItem { Text = "SEZWOP", Value = "SEZWOP" },
        new SelectItem { Text = "EXPWP", Value = "EXPWP" },
        new SelectItem { Text = "EXPWOP", Value = "EXPWOP" },
        new SelectItem { Text = "DEXP", Value = "DEXP" }
    };

    // Helper method to clone BillDetail
    private BillDetail CloneBillDetail(BillDetail source)
    {
        if (source == null) return null;

        return new BillDetail
        {
            SNo = source.SNo,
            BillDetailId = source.BillDetailId,
            BillDetailBillId = source.BillDetailBillId,
            BillDetailProductId = source.BillDetailProductId,
            BillDetailHsnCode = source.BillDetailHsnCode,
            BillDetailUnit = source.BillDetailUnit,
            BillDetailUnitId = source.BillDetailUnitId,
            BillDetailRate = source.BillDetailRate,
            BillDetailQty = source.BillDetailQty,
            BillDetailAmount = source.BillDetailAmount,
            BillDetailExtraChrg = source.BillDetailExtraChrg,
            BillDetailCurrencyId = source.BillDetailCurrencyId,
            BillDetailTaxableAmt = source.BillDetailTaxableAmt,
            BillDetailGstPer = source.BillDetailGstPer,
            BillDetailIgst = source.BillDetailIgst,
            BillDetailCgst = source.BillDetailCgst,
            BillDetailSgst = source.BillDetailSgst,
            BillDetailTotal = source.BillDetailTotal,
            BillDetailIgstPer = source.BillDetailIgstPer,
            BillDetailCgstPer = source.BillDetailCgstPer,
            BillDetailSgstPer = source.BillDetailSgstPer

        };
    }

    public async void Show(Bill bill)
    {
        if (bill?.BillId > 0)
        {
            EditModel = bill;

            BillDetails = bill.BillDetails?.Select(d => CloneBillDetail(d)).OrderBy(d => d.BillDetailId).ToList() ?? new List<BillDetail>();
            //OriginalDetails = bill.BillDetails?.Select(d => CloneBillDetail(d)).ToList() ?? new List<BillDetail>();

            for (int i = 0; i < BillDetails.Count; i++)
            {
                BillDetails[i].SNo = i + 1;




            }
            nextSNo = BillDetails.Count + 1;
            OnJobTypeChanged(EditModel.BillJobType);
            Title = "Edit Bill";
        }
        else
        {
            EditModel = new Bill
            {
                BillDate = DateTime.Now,
               // BillDueDate = DateTime.Now.AddDays(30),
                BillStatus = true,
                BillDetails = new List<BillDetail>()
            };
            BillDetails = new List<BillDetail>();
            // OriginalDetails = new List<BillDetail>();
            nextSNo = 1;
            Title = "Add Bill";
            InitializeInvoiceDetails();
        }

        UnsavedChanges.Clear();
        Visible = true;
        StateHasChanged();
    }

    private void Hide()
    {
        Visible = false;
        BillDetails.Clear();
        //  OriginalDetails.Clear();
        UnsavedChanges.Clear();
    }

    private async Task New_Click()
    {
        if (DetailGrid?.IsEditing() ?? false)
        {
            await DetailGrid.CancelEditAsync();
        }

        // Find next available SNo
        var activeDetails = BillDetails
            .Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete)
            .ToList();

        int nextAvailableSNo = activeDetails.Count > 0 
            ? activeDetails.Max(d => d.SNo) + 1 
            : 1;

        // Create a new BillDetail with defaults
        var newItem = new BillDetail
        {
            SNo = nextAvailableSNo,
            BillDetailQty = 1,
            BillDetailRate = 0,
            BillDetailAmount = 0,
            BillDetailTaxableAmt = 0,
            BillDetailGstPer = 0,
            BillDetailCgstPer = 0,
            BillDetailSgstPer = 0,
            BillDetailIgstPer = 0,
            BillDetailCgst = 0,
            BillDetailSgst = 0,
            BillDetailIgst = 0,
            BillDetailTotal = 0,
            BillDetailExchRate = EditModel?.BillExchRate ?? 1,
            BillDetailCurrencyId = EditModel?.BillDefaultCurrencyId ?? 0,
        Taxcode = string.Empty,
        BillDetailStatus = true
        };

        BillDetails.Add(newItem);

        // Refresh grid
        //DetailGrid.Reload();
        await InvokeAsync(StateHasChanged);
    }



    async Task Revert_Click()
    {

        await DetailGrid.CancelEditAsync();
        await ClearUnsavedChangesAsync();
        InitializeInvoiceDetails();
    }
    private void InitializeInvoiceDetails()
    {
        try
        {
            BillDetails.Clear();

            for (int i = 1; i <= 5; i++)
            {
                BillDetails.Add(new BillDetail 
            { 
                SNo = i, 
                BillDetailId = 0,
                BillDetailExchRate = EditModel?.BillExchRate ?? 1,
                BillDetailCurrencyId = EditModel?.BillDefaultCurrencyId ?? 0
            });
            }

            nextSNo = 6;
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error initializing details: {ex.Message}", "Error");
        }
    }
    async Task Submit_Click()
    {
        LoadingService.Show();
        try
        {
            foreach (var unsavedChange in UnsavedChanges)
            {
                var changedItem = unsavedChange.Key;
                var changeType = unsavedChange.Value.Type;

                switch (changeType)
                {
                    case DataChangeType.Addition:
                        // New items will be added in final save
                        break;
                    case DataChangeType.Delete:
                        // Mark for deletion
                        break;
                    case DataChangeType.Modification:
                        // Update calculations
                        UpdateRowAmounts(changedItem);
                        break;
                }
            }

            await ClearUnsavedChangesAsync();
            ToastService.Success("Changes applied successfully!");
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error applying changes: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs ea)
    {
        if (ea.ElementType == GridElementType.DataCell)
        {
            var detail = (BillDetail)DetailGrid.GetDataItem(ea.VisibleIndex);
            var column = (IGridDataColumn)ea.Column;
            bool isNew = detail == null;

            if (!isNew && UnsavedChanges.TryGetValue(detail, out var changes))
            {
                if (changes.Type == DataChangeType.Addition)
                    ea.CssClass = "grid-new-row";
                else if (changes.Type == DataChangeType.Delete)
                    ea.CssClass = "grid-deleted-row";
                else if (changes.ChangedFields.Contains(column.FieldName))
                    ea.CssClass = "grid-modified-cell";
            }
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newDetail = (BillDetail)e.EditModel;
            newDetail.SNo = nextSNo++;
            newDetail.BillDetailId = 0;
            newDetail.BillDetailCurrencyId = EditModel.BillDefaultCurrencyId;
        }
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editableDetail = (BillDetail)e.EditModel;
        var detail = (BillDetail)e.DataItem;

        if (e.IsNew)
        {
            BillDetails.Add(editableDetail);
            UnsavedChanges[editableDetail] = new(DataChangeType.Addition, new());
            // Initialize defaults for new row
            editableDetail.BillDetailExchRate = EditModel?.BillExchRate ?? 1;
            editableDetail.BillDetailCurrencyId = EditModel?.BillDefaultCurrencyId ?? 0;
        }
        else
        {
            var changedFields = ApplyModifiedFields(editableDetail, detail);
            if (changedFields.Count > 0)
            {
                if (UnsavedChanges.TryGetValue(detail, out var changes))
                    changes.ChangedFields.UnionWith(changedFields);
                else
                    UnsavedChanges.Add(detail, new(DataChangeType.Modification, changedFields));

                UpdateRowAmounts(detail);
            }
        }

        // Update main bill total
        //EditModel.BillNetAmount = (float)BillDetails.Sum(d => d.BillDetailTotal
        EditModel.BillNetAmount = (float)BillDetails
       .Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete)
       .Sum(d => d.BillDetailTotal);
    }

    async Task DeleteDataItem(object dataItem)
    {
        var detail = (BillDetail)dataItem;

        if (UnsavedChanges.ContainsKey(detail) && UnsavedChanges[detail].Type == DataChangeType.Addition)
        {
            // Remove newly added item
            UnsavedChanges.Remove(detail);
            BillDetails.Remove(detail);
        }
        else
        {
            // Mark existing item for deletion
            UnsavedChanges[detail] = new(DataChangeType.Delete, new());
            BillDetails.Remove(detail);
        }
        // ✅ Reindex SNo after deletion
        // int sn = 1;
        // foreach (var d in BillDetails.Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete))
        // {
        //     d.SNo = sn++;

        // }

        // EditModel.BillNetAmount = (float)BillDetails.Where(d => !UnsavedChanges.ContainsKey(d) ||
        //                                                     UnsavedChanges[d].Type != DataChangeType.Delete)
        //                                              .Sum(d => d.BillDetailTotal);
        // DetailGrid.Reload();

        // Reindex SNo after deletion (only for non-deleted items)
        var activeDetails = BillDetails
            .Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete)
            .OrderBy(d => d.SNo)
            .ToList();

        int sn = 1;
        foreach (var d in activeDetails)
        {
            d.SNo = sn++;
        }

        // Update totals
        EditModel.BillNetAmount = (float)activeDetails.Sum(d => d.BillDetailTotal);

        await InvokeAsync(StateHasChanged);
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        BillDetails = BillDetails
       .Where(d => d.BillDetailId > 0 || d.BillDetailProductId > 0)
       .Select(d => CloneBillDetail(d))
       .ToList();
        for (int i = 0; i < BillDetails.Count; i++)
        {
            BillDetails[i].SNo = i + 1;
        }
        nextSNo = BillDetails.Count + 1;
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateRowAmounts(BillDetail item)
    {
        if (item == null) return;
        // Auto-populate HSN and Unit when service is selected
        if (item.BillDetailProductId > 0)
        {
            var selectedService = ServiceList.FirstOrDefault(s => s.ServiceId == item.BillDetailProductId);
            if (selectedService != null)
            {
                item.BillDetailStatus = true;
                item.BillDetailHsnCode = selectedService.HsnName;
                var unitName = UnitList.FirstOrDefault(u => u.UnitId == selectedService.ServiceUnitId)?.UnitName;
                item.BillDetailUnit = unitName ?? string.Empty;

                if (item.BillDetailRate == 0 || item.BillDetailRate == default(double))
                {
                    var applicableRate = RateMasterList?
                        .Where(r =>
                            r.RateMasterPartyId == EditModel.BillPartyId &&
                            r.RateMasterServiceId == item.BillDetailProductId &&
                            r.RateMasterApplicableDt <= EditModel.BillDate)
                        .OrderByDescending(r => r.RateMasterApplicableDt) // Get the most recent rate
                        .FirstOrDefault();

                    if (applicableRate != null)
                    {
                        item.BillDetailRate = (double)applicableRate.RateMasterSaleRate;
                    }
                }

                // ✅ Handle BillDetailQty logic based on user input
                double bill20Ft = 0;
                double bill40Ft = 0;
                double manualQty = 0;
                // Try converting user input (if any) from string → number
                if (!string.IsNullOrWhiteSpace(EditModel?.Bill20Ft))
                    double.TryParse(EditModel.Bill20Ft, out bill20Ft);

                if (!string.IsNullOrWhiteSpace(EditModel?.Bill40Ft))
                    double.TryParse(EditModel.Bill40Ft, out bill40Ft);

                if ((item?.BillDetailQty)!=0)
                    manualQty=item.BillDetailQty ;


                if (manualQty > 0)
                {
                    item.BillDetailQty = manualQty;
                }
                else if (bill20Ft == 0 && bill40Ft == 0)
                {
                    item.BillDetailQty = 1;
                }
                else
                {
                    // Otherwise, sum both values
                    item.BillDetailQty = bill20Ft + bill40Ft;
                }

                // ✅ Handle Exchange Rate logic
                if (item.BillDetailExchRate == 0 || item.BillDetailExchRate == default)
                {
                    // Only auto-assign if user hasn't entered custom value
                    item.BillDetailExchRate = (EditModel?.BillExchRate ?? 0) == 0
                        ? 1
                        : EditModel.BillExchRate;
                }

                var selectedHsn = HsnList.FirstOrDefault(h => h.HsnName == selectedService.HsnName);
                var selectedGstslab = GstslabList.FirstOrDefault(h => h.GstSlabIgstPer == selectedService.HsnGstPer);
                if (selectedHsn != null)
                {


                    // Map GST % from slab — if your HSN table has GST percentage
                    item.BillDetailGstPer = selectedHsn.HsnGstPer; // ✅ You said this ID corresponds to percentage
                    item.Taxcode = selectedGstslab.GstSlabName; // ✅ Not mapped to DB but used in grid
                }
                var selectedCompany = CompanyList?.FirstOrDefault(c => c.Status == true);
                var selectedpos = StateList.FirstOrDefault(h => h.StateId == EditModel.BillPlaceOfSupply);
                // ✅ Apply IGST or CGST+SGST based on Place of Supply vs Company State
                if (selectedCompany != null && selectedpos != null)
                {
                    item.BillDetailAmount = item.BillDetailQty * item.BillDetailRate;
                    item.BillDetailTaxableAmt = item.BillDetailAmount * item.BillDetailExchRate;
                    // Convert string StateId → int for safe comparison
                    var companyState = StateList?.FirstOrDefault(s =>
           !string.IsNullOrEmpty(selectedCompany.StateId) &&
           s.StateName.Equals(selectedCompany.StateId, StringComparison.OrdinalIgnoreCase));

                    if (companyState != null)  // ✅ Added null check
                    {
                        int companyStateId = companyState.StateId;

                        // if (companyStateId == EditModel.BillPlaceOfSupply)
                        // {
                        //     // Intra-state → CGST + SGST
                        //     item.BillDetailIgst = 0;
                        //     item.BillDetailIgstPer = 0;
                        //     item.BillDetailCgstPer = item.BillDetailGstPer / 2;
                        //     item.BillDetailSgstPer = item.BillDetailGstPer / 2;
                        //     item.BillDetailCgst = item.BillDetailTaxableAmt * (item.BillDetailCgstPer / 100);
                        //     item.BillDetailSgst = item.BillDetailTaxableAmt * (item.BillDetailSgstPer / 100);
                        // }
                        // else
                        // {
                        //     // Inter-state → IGST only
                        //     item.BillDetailCgstPer = 0;
                        //     item.BillDetailSgstPer = 0;
                        //     item.BillDetailCgst = 0;
                        //     item.BillDetailSgst = 0;
                        //     item.BillDetailIgstPer = item.BillDetailGstPer;
                        //     item.BillDetailIgst = item.BillDetailTaxableAmt * (item.BillDetailIgstPer / 100);
                        // }



                        string supplyType = EditModel.BillSupplyType ?? "B2B";

                        switch (supplyType)
                        {
                            case "B2B":
                            case "B2CS":
                                // Normal GST logic (domestic)
                                if (companyStateId == EditModel.BillPlaceOfSupply)
                                {
                                    // Intra-state → CGST + SGST
                                    item.BillDetailIgst = 0;
                                    item.BillDetailIgstPer = 0;
                                    item.BillDetailCgstPer = item.BillDetailGstPer / 2;
                                    item.BillDetailSgstPer = item.BillDetailGstPer / 2;
                                    item.BillDetailCgst = item.BillDetailTaxableAmt * (item.BillDetailCgstPer / 100);
                                    item.BillDetailSgst = item.BillDetailTaxableAmt * (item.BillDetailSgstPer / 100);
                                }
                                else
                                {
                                    // Inter-state → IGST
                                    item.BillDetailCgstPer = 0;
                                    item.BillDetailSgstPer = 0;
                                    item.BillDetailIgstPer = item.BillDetailGstPer;
                                    item.BillDetailIgst = item.BillDetailTaxableAmt * (item.BillDetailIgstPer / 100);
                                }
                                break;

                            case "SEZWP":
                            case "EXPWP":
                            case "DEXP":
                                // ✅ Export or SEZ with payment → only IGST
                                item.BillDetailCgstPer = 0;
                                item.BillDetailSgstPer = 0;
                                item.BillDetailIgstPer = item.BillDetailGstPer;
                                item.BillDetailIgst = item.BillDetailTaxableAmt * (item.BillDetailIgstPer / 100);
                                break;

                            case "SEZWOP":
                            case "EXPWOP":
                                // ✅ Export or SEZ without payment → no GST
                                item.BillDetailIgst = 0;
                                item.BillDetailCgst = 0;
                                item.BillDetailSgst = 0;
                                item.BillDetailIgstPer = 0;
                                item.BillDetailCgstPer = 0;
                                item.BillDetailSgstPer = 0;
                                break;
                        }
                    }




                }


            }
        }

        // Calculate amounts
        item.BillDetailAmount = item.BillDetailQty * item.BillDetailRate;
        item.BillDetailTaxableAmt = item.BillDetailAmount * item.BillDetailExchRate;
        item.BillDetailTotal = item.BillDetailTaxableAmt +item.BillDetailIgst +item.BillDetailCgst +item.BillDetailSgst;
        // Update main bill total
        if (EditModel != null)
        {
            EditModel.BillNetAmount = (float)BillDetails
                .Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete)
                .Sum(d => d.BillDetailTotal);
        }
    }

    private HashSet<string> ApplyModifiedFields(BillDetail source, BillDetail target)
    {
        var changedFields = new HashSet<string>();
        var properties = typeof(BillDetail).GetProperties();

        foreach (var prop in properties)
        {
            if (prop.Name == "SNo" || prop.Name == "BillDetailId") continue;

            var sourceValue = prop.GetValue(source);
            var targetValue = prop.GetValue(target);

            if (!Equals(sourceValue, targetValue))
            {
                prop.SetValue(target, sourceValue);
                changedFields.Add(prop.Name);
            }
        }

        return changedFields;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            // --- STEP 1: Apply Unsaved Changes ---
            foreach (var unsavedChange in UnsavedChanges)
            {
                var changedItem = unsavedChange.Key;
                var changeType = unsavedChange.Value.Type;

                switch (changeType)
                {
                    case DataChangeType.Addition:
                        // You can handle additions later in final save
                        break;

                    case DataChangeType.Delete:
                        // Simply skip these rows in total calculations
                        break;

                    case DataChangeType.Modification:
                        // Update row calculations (GST, totals, etc.)
                        UpdateRowAmounts(changedItem);
                        break;
                }
            }



            // --- STEP 2: Prepare Active Rows (non-deleted) ---
            var activeDetails = BillDetails
                .Where(d => !UnsavedChanges.ContainsKey(d) || UnsavedChanges[d].Type != DataChangeType.Delete)
                .ToList();

            // --- STEP 3: Recalculate Bill Totals ---
            EditModel.BillNetAmount = (float)activeDetails.Sum(d => d.BillDetailTotal);
            EditModel.BillAmount = activeDetails.Sum(d => d.BillDetailAmount);
            EditModel.BillTaxableAmt = activeDetails.Sum(d => d.BillDetailTaxableAmt);
            EditModel.BillIgst = activeDetails.Sum(d => d.BillDetailIgst);
            EditModel.BillCgst = activeDetails.Sum(d => d.BillDetailCgst);
            EditModel.BillSgst = activeDetails.Sum(d => d.BillDetailSgst);
            EditModel.BillTotal = EditModel.BillNetAmount;
            EditModel.BillYearId = YearStatechangeService.SelectedYearId;
            EditModel.BillNo = EditModel.BillNo;
            // --- STEP 4: Filter only valid detail lines ---
            var validDetails = activeDetails
                .Where(d => d.BillDetailProductId > 0 || !string.IsNullOrEmpty(d.BillDetailHsnCode))
                .ToList();

            EditModel.BillDetails = validDetails;

            // --- STEP 5: Save Bill (Create or Update) ---
            bool result;
            if (EditModel.BillId == 0)
            {
                result = await BillService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Bill created successfully!");
                else
                {
                    ToastService.Error("Failed to create Bill!");
                    return;
                }
            }
            else
            {
                result = await BillService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Bill updated successfully!");
                else
                {
                    ToastService.Error("Failed to update Bill!");
                    return;
                }
            }

            // --- STEP 6: UI Cleanup ---   
            //ToastService.Success("Changes applied successfully!");
            var confirm = await ConfirmDialogService.ShowAsync("Are you sure you want to print selected bill(s)?");
            if (confirm)
            {

               
                await PreviewMergedReports();

            }
            UnsavedChanges.Clear();
            Visible = false;
            await OnSaved.InvokeAsync();
          
          
           
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving bill: {ex.Message}");
            Console.WriteLine($"❌ Full error: {ex}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }


    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }


    private async Task PreviewMergedReports()
    {
        if (EditModel == null || EditModel.BillId == 0)
        {
            ToastService.Warning("No bill to print.");
            return;
        }

        LoadingService.Show("Building merged report...");
        try
        {
            var layoutBytes = await ReportDataService.GetLayoutBytesAsync(EditModel.BillReportId);
            if (layoutBytes == null || layoutBytes.Length == 0)
            {
                ToastService.Error("Failed to load report layout.");
                return;
            }

            var billList = new List<Bill> { EditModel };
            var dto = await BillService.GetPrintableBillAsync(EditModel.BillId);

            var dtoDict = new Dictionary<Bill, PrintBillFullDto?>
            {
                { EditModel, dto }
            };
            await ReportService.CreateMergedReportAsync(
                billList,
                bill => dtoDict.ContainsKey(bill) ? dtoDict[bill] : null,
                layoutBytes);

            Navigation.NavigateTo("/reportviewer");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}