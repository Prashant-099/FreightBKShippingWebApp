@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@using DevExpress.Blazor
@inject BillService BillService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject VoucherService VoucherService
@inject AccountService AccountService
@inject StateService StateService
@inject LocationService LocationService
@inject NotifyService NotifyService
@inject CargoService CargoService
@inject CurrencyService CurrencyService
@inject VesselService VesselService
@inject ServiceService ServiceService

<style>
    .grid-container {
        background: #fff;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        padding: 10px;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 6px;
        margin-bottom: 8px;
    }

</style>

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" CloseOnOutsideClick="false" MaxWidth="1500px" Width="90%"
         horizontalAlignment="HorizontalAlignment.Center"
         verticalAlignment="VerticalAlignment.Center">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxbill">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Bill Type" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxComboBox TData="Voucher" TValue="int"
                                Data="@VoucherList"
                                TextFieldName="VoucherName"
                                ValueFieldName="VoucherId"
                                AllowUserInput="true"
                                NullText="-- Select Account --"
                                @bind-Value="EditModel.BillVoucherId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill Date" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.BillDate" Format="yyyy-MM-dd" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill Due Date" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.BillDueDate" Format="yyyy-MM-dd" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Party Name" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxComboBox TData="Account" TValue="int"
                                Data="@AccountList"
                                TextFieldName="AccountName"
                                ValueFieldName="AccountId"
                                ClearButtonVisible="true"
                                AllowUserInput="false"
                                NullText="-- Select Account --"
                                @bind-Value="EditModel.BillPartyId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Bill No" ColSpanMd="3">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BillNo" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Job Type" ColSpanMd="3">
                <DxComboBox Data="@JobTypeList"
                            @bind-Value="EditModel.BillJobType"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Job No" ColSpanMd="3">
                    <DxTextBox @bind-Text="EditModel.BillJobNo" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Supply Type" ColSpanMd="3">
                <DxComboBox Data="@SupplyTypeList"
                            @bind-Value="EditModel.BillSupplyType"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Place of Supply" ColSpanMd="3">
                
                <DxComboBox TData="State" TValue="int"
                            Data="@stateList"
                            TextFieldName="StateName"
                            ValueFieldName="StateId"
                            ClearButtonVisible="true"
                            AllowUserInput="true"
                            NullText="-- Select POS --"
                            @bind-Value="EditModel.BillPlaceOfSupply"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>
            <DxFormLayoutGroup Caption="Tax Details" Expanded="true"
                               ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" ColSpanMd="12">

                <DxFormLayoutItem Caption="POL" ColSpanMd="3">
                    <DxComboBox TData="Location" TValue="int"
                                Data="@locationList"
                                TextFieldName="LocationName"
                                ValueFieldName="LocationId"
                                AllowUserInput="true"
                                NullText="-- Select POL --"
                                @bind-Value="EditModel.BillPolId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Consignee" ColSpanMd="3">
                    <DxComboBox TData="Notify" TValue="int"
                                Data="@ConsigneeList"
                                TextFieldName="NotifyName"
                                ValueFieldName="NotifyId"
                                AllowUserInput="true"
                                NullText="-- Select Consignee --"
                                @bind-Value="EditModel.BillConsigneeId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="SB/BE No" ColSpanMd="3">
                    <DxTextBox @bind-Text="EditModel.BillSbNo" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Date" ColSpanMd="3">
                    <DxDateEdit @bind-Date="EditModel.BillSbDate" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="QTY" ColSpanMd="3">
                    <DxSpinEdit @bind-Value="EditModel.BillQty" ShowSpinButtons="false" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="POD" ColSpanMd="3">
                    <DxComboBox TData="Location" TValue="int"
                                Data="@locationList"
                                TextFieldName="LocationName"
                                ValueFieldName="LocationId"
                                AllowUserInput="true"
                                NullText="-- Select POD --"
                                @bind-Value="EditModel.BillPodId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Cargo" ColSpanMd="3">
                    <DxComboBox TData="Cargo" TValue="int"
                                Data="@CargoList"
                                TextFieldName="CargoName"
                                ValueFieldName="CargoId"
                                AllowUserInput="true"
                                NullText="-- Select Cargo --"
                                @bind-Value="EditModel.BillCargoId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="BL No" ColSpanMd="3">
                    <DxTextBox @bind-Text="EditModel.BillBlNo" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Date" ColSpanMd="3">
                    <DxDateEdit @bind-Date="EditModel.BillBlDate" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Gross WT" ColSpanMd="3">
                    <DxSpinEdit @bind-Value="EditModel.BillGrossWt" ShowSpinButtons="false"/>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Vessel" ColSpanMd="3">
                    <DxComboBox TData="Vessel" TValue="int"
                                Data="@VesselList"
                                TextFieldName="VesselName"
                                ValueFieldName="VesselId"
                                AllowUserInput="true"
                                NullText="-- Select Vessel --"
                                @bind-Value="EditModel.BillVesselId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                  <DxFormLayoutItem Caption="Shipper" ColSpanMd="3">
                    <DxComboBox TData="Notify" TValue="int"
                                Data="@ShipperList"
                                TextFieldName="NotifyName"
                                ValueFieldName="NotifyId"
                                AllowUserInput="true"
                                NullText="-- Select Shipper --"
                                @bind-Value="EditModel.BillShipperId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="S.Inv." ColSpanMd="3">
                    <DxTextBox @bind-Text="EditModel.BillShipperInvNo" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Date" ColSpanMd="3">
                    <DxDateEdit @bind-Date="EditModel.BillShipperInvDate" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Net WT" ColSpanMd="3">
                    <DxSpinEdit @bind-Value="EditModel.BillNetWt"  ShowSpinButtons="false"/>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Line" ColSpanMd="3">
                    <DxComboBox TData="Notify" TValue="int"
                                Data="@LineList"
                                TextFieldName="NotifyName"
                                ValueFieldName="NotifyId"
                                AllowUserInput="true"
                                NullText="-- Select Line --"
                                @bind-Value="EditModel.BillLineId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Cont 20 FT" ColSpanMd="2">
                    <DxTextBox @bind-Text="EditModel.Bill20Ft" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Cont 40 FT" ColSpanMd="2">
                    <DxTextBox @bind-Text="EditModel.Bill40Ft" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Ex. Rate" ColSpanMd="4">
                    <div class="d-flex gap-1">
                    <DxComboBox TData="Currency" TValue="int"
                                Data="@CurrList"
                                TextFieldName="CurrencyName"
                                ValueFieldName="CurrencyId"
                                AllowUserInput="true"
                                NullText="-- Select Currency --"
                                @bind-Value="EditModel.BillDefaultCurrencyId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                    <DxSpinEdit @bind-Value="EditModel.BillExchRate" ShowSpinButtons="false" />
                    </div>
                </DxFormLayoutItem>
               
                <DxFormLayoutItem Caption="HBL No" ColSpanMd="3">
                    <DxTextBox @bind-Text="EditModel.BillHblNo" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="CBM" ColSpanMd="2">
                    <DxSpinEdit @bind-Value="EditModel.BillCbmQty" ShowSpinButtons="false"/>
                </DxFormLayoutItem>
             </DxFormLayoutGroup>
        </DxFormLayout>

        <DxFormLayout>
              <DxFormLayoutGroup Caption="" ColSpanMd="12">
         <DxFormLayoutTabPages>  
                    <DxFormLayoutTabPage Caption="Service Details">
                       
                @* 
                <div class="grid-container">
                    <!-- Action Buttons Row -->
                    <div class="action-buttons">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                @onclick="AddNewDetailRow">
                            <i class="bi bi-plus"></i> Add Row
                        </button>
                        <button type="button"
                                class="btn btn-secondary btn-sm"
                                @onclick="ClearAllRows">
                            <i class="bi bi-trash"></i> Clear All
                        </button>
                    </div>


                                <DxGrid Data="@BillDetails"
                                    TItem="BillDetails"
                            @ref="DetailGrid"
                            KeyFieldName="SNo"
                            EditMode="GridEditMode.EditCell"
                            ShowAddNewButton="false"
                            EditNewRowPosition="GridEditNewRowPosition.Top"
                            EditOnKeyPress="true"
                            PageSize="20">

                        <Columns>
                            <!-- Serial Number -->
                            <DxGridDataColumn FieldName="SNo"
                                              Caption="SNo"
                                              Width="60px" />

                            <!-- Action Buttons Column -->
                            <DxGridCommandColumn Width="120px">
                                <HeaderCaptionTemplate>Actions</HeaderCaptionTemplate>
                                <CellDisplayTemplate>
                                    @{
                                                    var rowIndex = BillDetails.FindIndex(x => x.SNo == ((BillDetail)context.DataItem).SNo);
                                    }
                                    <div class="btn-group btn-group-sm">
                                        <button type="button"
                                                class="btn btn-success btn-sm btn-action"
                                                @onclick="() => AddRowAfter(rowIndex)"
                                                title="Add Row">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                        <button type="button"
                                                class="btn btn-danger btn-sm btn-action"
                                                @onclick="() => RemoveRow(rowIndex)"
                                                title="Remove Row">
                                            <i class="bi bi-x"></i>
                                        </button>
                                        <button type="button"
                                                class="btn btn-info btn-sm btn-action"
                                                @onclick="() => SearchProduct(rowIndex)"
                                                title="Search Product">
                                            <i class="bi bi-search"></i>
                                        </button>
                                    </div>
                                </CellDisplayTemplate>
                            </DxGridCommandColumn>

                            <!-- Select Item -->
                                    <DxGridDataColumn FieldName="BillDetailProductId" Caption="Select Item" Width="200px">
                                <EditSettings>
                                            <DxComboBoxSettings Data="@ServiceList"
                                                                ValueFieldName="ServiceId"
                                                                TextFieldName="ServiceName" />
                                </EditSettings>
                            </DxGridDataColumn>

                          


                        </Columns>

                        <!-- Summary Row -->
                        <TotalSummary>
                            @* <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="Quantity"
                                               DisplayText="Total Qty: {0:N2}" />
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="Amount"
                                               DisplayText="Total: ₹{0:N2}" />
                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum"
                                               FieldName="FinalAmount"
                                               DisplayText="Net Total: ₹{0:N2}" />
                        </TotalSummary>

                    </DxGrid>
                    </div> *@

                     
                    <!-- Action Buttons Row -->
                    <div class="action-buttons">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                @onclick="AddNewDetailRow">
                            <i class="bi bi-plus"></i> Add Row
                        </button>
                        <button type="button"
                                class="btn btn-secondary btn-sm"
                                @onclick="ClearAllRows">
                            <i class="bi bi-trash"></i> Clear All
                        </button>
                    </div>
                        <DxGrid Data="@BillDetails"
                                TItem="BillDetail"
                                @ref="DetailGrid"
                                KeyFieldName="SNo"
                                EditMode="GridEditMode.EditCell"
                                ShowAddNewButton="false"
                                ShowFilterRow="false"
                                ShowGroupPanel="false"
                                PageSize="10"
                                CellValueChanged="@OnCellValueChanged">

                            <Columns>
                              

                                <!-- Action Buttons Column -->
                                <DxGridCommandColumn Width="120px">
                                    <HeaderCaptionTemplate>Actions</HeaderCaptionTemplate>
                                    <CellDisplayTemplate>
                                        @{
                                            var rowIndex = BillDetails.FindIndex(x => x.SNo == ((BillDetail)context.DataItem).SNo);
                                        }
                                        <div class="btn-group btn-group-sm">
                                            <button type="button"
                                                    class="btn btn-success btn-sm btn-action"
                                                    @onclick="() => AddRowAfter(rowIndex)"
                                                    title="Add Row">
                                                <i class="bi bi-plus"></i>
                                            </button>
                                            <button type="button"
                                                    class="btn btn-danger btn-sm btn-action"
                                                    @onclick="() => RemoveRow(rowIndex)"
                                                    title="Remove Row">
                                                <i class="bi bi-x"></i>
                                            </button>
                                            <button type="button"
                                                    class="btn btn-info btn-sm btn-action"
                                                    @onclick="() => SearchProduct(rowIndex)"
                                                    title="Search Product">
                                                <i class="bi bi-search"></i>
                                            </button>
                                        </div>
                                    </CellDisplayTemplate>
                                </DxGridCommandColumn>

                                <DxGridDataColumn FieldName="SNo" Caption="SNo" Width="60px" ReadOnly="true" />

                                <DxGridDataColumn FieldName="BillDetailProductId" Caption="Service Name" Width="200px">
                                    <EditSettings>
                                        <DxComboBoxSettings Data="@ServiceList"
                                                            TextFieldName="ServiceName"
                                                            ValueFieldName="ServiceId"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                    </EditSettings>
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="BillDetailHsnCode" Caption="SAC" Width="100px" />
                                <DxGridDataColumn FieldName="BillDetailUnit" Caption="Unit" Width="80px" />
                                <DxGridDataColumn FieldName="BillDetailRate" Caption="Rate" Width="100px" />
                                <DxGridDataColumn FieldName="BillDetailQty" Caption="Qty" Width="100px" />
                                <DxGridDataColumn FieldName="BillDetailAmount" Caption="Amount" Width="120px" ReadOnly="true" />
                                <DxGridDataColumn FieldName="BillDetailExtraChrg" Caption="Ex. Chrg" Width="100px" />
                               
                                <DxGridDataColumn FieldName="BillDetailCurrencyId" Caption="Curr." Width="80px">
                                    <EditSettings>
                                        <DxComboBoxSettings Data="@CurrList"
                                                            TextFieldName="CurrencyName"
                                                            ValueFieldName="CurrencyId" />
                                    </EditSettings>
                                </DxGridDataColumn>

                                <DxGridDataColumn FieldName="BillDetailTaxableAmt" Caption="Taxable" Width="100px" />
                                <DxGridDataColumn FieldName="BillDetailGstPer" Caption="Tax Code" Width="100px" />
                                <DxGridDataColumn FieldName="BillDetailIgst" Caption="IGST" Width="80px" />
                                <DxGridDataColumn FieldName="BillDetailCgst" Caption="CGST" Width="80px" />
                                <DxGridDataColumn FieldName="BillDetailSgst" Caption="SGST" Width="80px" />
                                <DxGridDataColumn FieldName="BillDetailTotal" Caption="Total" Width="120px" ReadOnly="true" />

                           
                            </Columns>

                            <TotalSummary>
                                <DxGridSummaryItem FieldName="BillDetailAmount" SummaryType="GridSummaryItemType.Sum" DisplayText="Total: {0:N2}" />
                                <DxGridSummaryItem FieldName="BillDetailTotal" SummaryType="GridSummaryItemType.Sum" DisplayText="Grand Total: {0:N2}" />
                            </TotalSummary>
                        </DxGrid>

                        <div class="mt-2 d-flex justify-content-between align-items-center border-top pt-2">
                            <div class="w-75">
                                <label>Remarks</label>
                                <DxTextBox @bind-Text="EditModel.BillRemarks" Width="100%" />
                            </div>
                            <div class="text-end pe-3">
                                <label class="fw-bold me-2">Total Amount:</label>
                                <DxSpinEdit @bind-Value="EditModel.BillNetAmount" ReadOnly="true" Format="N2" Width="150px" />
                            </div>
                        </div>




                        </DxFormLayoutTabPage>
            <DxFormLayoutTabPage Caption="Extra Details">
            </DxFormLayoutTabPage>
                        </DxFormLayoutTabPages>
                        </DxFormLayoutGroup>
                        </DxFormLayout>
        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {

    private double TotalAmount => BillDetails.Sum(x => x.BillDetailTotal);

    private void UpdateRowAmounts(BillDetail item)
    {
        item.BillDetailAmount = item.BillDetailQty * item.BillDetailRate;
        item.BillDetailTaxableAmt = item.BillDetailAmount + (item.BillDetailExtraChrg);
        item.BillDetailTotal = item.BillDetailTaxableAmt +
            (item.BillDetailIgst ) +
            (item.BillDetailCgst ) +
            (item.BillDetailSgst) ;

        // Update main bill total
        EditModel.BillNetAmount = (float)BillDetails.Sum(d => d.BillDetailTotal);
    }
    private void OnCellValueChanged(GridCustomizeCellEditorEventArgs e)
    {
        if (e.Grid is BillDetail detail)
        {
            UpdateRowAmounts(detail);
            StateHasChanged();
        }
    }







    private List<BillDetail> OriginalDetails = new();




    int nextSNo = 1;
    List<BillDetail> BillDetails = new();
 
    DxGrid DetailGrid;
    void AddNewDetailRow()
    {
        try
        {
            var newDetail = new BillDetail
            {
                SNo = nextSNo++,
                BillDetailId = 0 // Indicates new row
            };
            BillDetails.Add(newDetail);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error adding row: {ex.Message}", "Error");
        }
    }

    void AddRowAfter(int index)
    {
        try
        {
            if (index >= 0 && index < BillDetails.Count)
            {
                var newItem = new BillDetail { SNo = nextSNo++, BillDetailId = 0 };
                BillDetails.Insert(index + 1, newItem);

                // Renumber all rows
                for (int i = 0; i < BillDetails.Count; i++)
                {
                    BillDetails[i].SNo = i + 1;
                }
                nextSNo = BillDetails.Count + 1;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error adding row: {ex.Message}", "Error");
        }
    }

    void RemoveRow(int index)
    {
        try
        {
            if (index >= 0 && index < BillDetails.Count)
            {
                BillDetails.RemoveAt(index);

                // Renumber all rows
                for (int i = 0; i < BillDetails.Count; i++)
                {
                    BillDetails[i].SNo = i + 1;
                }
                nextSNo = BillDetails.Count + 1;

                // Recalculate totals
                EditModel.BillNetAmount = (float)BillDetails.Sum(d => d.BillDetailTotal);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error removing row: {ex.Message}", "Error");
        }
    }

    void SearchProduct(int index)
    {
        try
        {
            ToastService.Info($"Search product for row {index + 1}", "Search");
            // TODO: Implement product search popup
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error in search: {ex.Message}", "Error");
        }
    }

    void ClearAllRows()
    {
        try
        {
            InitializeInvoiceDetails();
            EditModel.BillNetAmount = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error clearing rows: {ex.Message}", "Error");
        }
    }

    private void InitializeInvoiceDetails()
    {
        try
        {
            BillDetails.Clear();
            // Add initial empty rows
            for (int i = 1; i <= 5; i++)
            {
                BillDetails.Add(new BillDetail { SNo = i, BillDetailId = 0 });
            }
            nextSNo = 6;
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error initializing details: {ex.Message}", "Error");
        }
    }


    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Bill";
    private Bill EditModel { get; set; } = new();
    private List<Voucher> VoucherList = new();
    private List<Account> AccountList = new();
    private List<State> stateList = new();
    private List<Location> locationList = new();
    private List<Notify> ConsigneeList = new();
    private List<Notify> ShipperList = new();
    private List<Notify> LineList = new();
    private List<Cargo> CargoList = new();
    private List<Vessel> VesselList = new();
    private List<Currency> CurrList = new();
    private List<Service> ServiceList = new();
    protected override async Task OnInitializedAsync()
    {
        ServiceList = await ServiceService.GetAllAsync();
        VoucherList = await VoucherService.GetAllAsync();
        stateList = await StateService.GetStatesAsync();
        locationList = await LocationService.GetAllAsync();
        CargoList = await CargoService.GetAllAsync();
        CurrList = await CurrencyService.GetAllAsync();
        VesselList = await VesselService.GetAllAsync();
        var allNotify = await NotifyService.GetAllAsync();

        ConsigneeList = allNotify
           .Where(n => n.NotifyType == "CONSIGNEE")
           .ToList();
        ShipperList = allNotify
           .Where(n => n.NotifyType == "SHIPPER")
           .ToList();
        LineList = allNotify
        .Where(n => n.NotifyType == "LINE")
        .ToList();

        var allAccounts = await AccountService.GetAllAsync();

        // Filter only Sales & Purchase Accounts (group id 22, 23)
        AccountList = allAccounts
            .Where(a => a.AccountTypeId == 14 || a.AccountTypeId == 18)
            .ToList();
        
    }
    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }

    }
    List<SelectItem> JobTypeList = new()
{
    new SelectItem { Text = "IMPORT", Value = "IMPORT" },
    new SelectItem { Text = "EXPORT", Value = "EXPORT" }
};
    List<SelectItem> SupplyTypeList = new()
{
    new SelectItem { Text = "B2B", Value = "B2B" },
    new SelectItem { Text = "B2CS", Value = "B2CS" },
    new SelectItem { Text = "SEZWP", Value = "SEZWP" },
        new SelectItem { Text = "SEZWOP", Value = "SEZWOP" },
            new SelectItem { Text = "EXPWP", Value = "EXPWP" },
                new SelectItem { Text = "EXPWOP", Value = "EXPWOP" },
                    new SelectItem { Text = "DEXP", Value = "DEXP" }
};
    public async void Show(Bill bill)
    {
        if (bill?.BillId > 0)
        {
            // Editing existing bill - load full data including details
            //var fullBill = await BillService.GetByIdAsync(bill.BillId);
            if (bill != null)
            {
                EditModel = bill;
                BillDetails = bill.BillDetails?.ToList() ?? new List<BillDetail>();

                // Set SNo for grid display
                for (int i = 0; i < BillDetails.Count; i++)
                {
                    BillDetails[i].SNo = i + 1;
                }
                nextSNo = BillDetails.Count + 1;
            }
            Title = "Edit Bill";
        }
        else
        {
            // New bill
            EditModel = new Bill
            {
                BillDate = DateTime.Now,
                BillDueDate = DateTime.Now.AddDays(30),
                BillStatus = true,
                BillDetails = new List<BillDetail>()
            };
            InitializeInvoiceDetails();
            Title = "Add Bill";
        }

        Visible = true;
        StateHasChanged();
    }

    private void Hide()
    {
        Visible = false;
        BillDetails.Clear();
        OriginalDetails.Clear();
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            // Calculate final totals
            EditModel.BillNetAmount = (float)BillDetails.Sum(d => d.BillDetailTotal);
            EditModel.BillAmount = BillDetails.Sum(d => d.BillDetailAmount);
            EditModel.BillTaxableAmt = BillDetails.Sum(d => d.BillDetailTaxableAmt );
            EditModel.BillIgst = BillDetails.Sum(d => d.BillDetailIgst);
            EditModel.BillCgst = BillDetails.Sum(d => d.BillDetailCgst );
            EditModel.BillSgst = BillDetails.Sum(d => d.BillDetailSgst );
            EditModel.BillTotal = EditModel.BillNetAmount;

            // Remove empty rows before saving
            var validDetails = BillDetails
                .Where(d => d.BillDetailProductId > 0 ||
                           !string.IsNullOrEmpty(d.BillDetailHsnCode))
                .ToList();

            // Attach details to bill
            EditModel.BillDetails = validDetails;

            bool result;
            if (EditModel.BillId == 0)
            {
                // Create new bill with details
                result = await BillService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Bill created successfully!");
                else
                {
                    ToastService.Error("Failed to create Bill!");
                    return;
                }
            }
            else
            {
                // Update bill with details
                // Your API automatically handles:
                // - Adding new details (BillDetailId == 0)
                // - Updating existing details (BillDetailId > 0)
                // - Removing details not in the list
                result = await BillService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Bill updated successfully!");
                else
                {
                    ToastService.Error("Failed to update Bill!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving bill: {ex.Message}");
            Console.WriteLine($"❌ Full error: {ex}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
