  
@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject HsnSacService HsnSacService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject GstSlabService GstSlabService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="600px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxhsnsac">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>

            <DxFormLayoutItem Caption="HSN/SAC Name">
                <DxTextBox @bind-Text="EditModel.HsnName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="GST %">
               
                <DxComboBox TData="GstSlab" TValue="int"
                            Data="@GstslabList"
                            TextFieldName="GstSlabIgstPer"
                            ValueFieldName="GstSlabId"
                            ClearButtonVisible="true"
                            AllowUserInput="false"
                            NullText="-- Select GST % --"
                            @bind-Value="EditModel.HsnGstSlabId"
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Cess Type">
                <DxComboBox Data="@TypeList"
                            @bind-Value="EditModel.HsnCessType"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            AllowUserInput="true"
                            SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Cess">
                <DxSpinEdit @bind-Value="EditModel.HsnCess" Min="0" Max="100" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Addl Cess">
                <DxSpinEdit @bind-Value="EditModel.HsnAddCess" Min="0" Max="100" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <DxCheckBox @bind-Checked="EditModel.HsnStatus" />
            </DxFormLayoutItem>

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit HSN/SAC";
    private HsnSac EditModel { get; set; } = new();
    private List<GstSlab> GstslabList = new();
    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }

    }
    List<SelectItem> TypeList = new()
{
    new SelectItem { Text = "%", Value = "%" },
    new SelectItem { Text = "AMOUNT", Value = "AMOUNT" }
};
    protected override async Task OnInitializedAsync()
    {
        GstslabList = await GstSlabService.GetAllAsync();
       
    }
    public void Show(HsnSac hsn)
    {
        EditModel = hsn != null
            ? new HsnSac
            {
                HsnId = hsn.HsnId,
                HsnName = hsn.HsnName,
                HsnGstPer = hsn.HsnGstPer,
                HsnCessType = hsn.HsnCessType,
                HsnCess = hsn.HsnCess,
                HsnAddCess = hsn.HsnAddCess,
                HsnStatus = hsn.HsnStatus
            }
            : new HsnSac { HsnStatus = true };

        Title = hsn?.HsnId > 0 ? "Edit HSN/SAC" : "Add HSN/SAC";
        Visible = true;
    }

    private void Hide() => Visible = false;

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool result;
            if (EditModel.HsnId == 0)
                result = await HsnSacService.CreateAsync(EditModel);
            else
                result = await HsnSacService.UpdateAsync(EditModel);

            if (result)
            {
                ToastService.Success(EditModel.HsnId == 0 ? "HSN/SAC created successfully!" : "HSN/SAC updated successfully!");
                Visible = false;
                await OnSaved.InvokeAsync();
            }
            else
            {
                ToastService.Error("Failed to save HSN/SAC!");
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
