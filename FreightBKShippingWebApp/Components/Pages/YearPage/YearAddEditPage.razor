@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject YearService YearService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="600px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxeditform">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Year Name">
                <ChildContent Context="ctx" >
                    <DxTextBox @bind-Text="EditModel.YearName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="From Date">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.YearDateFrom" Format="dd-MM-yyyy" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="To Date">
                <ChildContent Context="ctx">
                    <DxDateEdit @bind-Date="EditModel.YearDateTo" Format="dd-MM-yyyy" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <ChildContent Context="ctx">
                    <DxCheckBox @bind-Checked="EditModel.YearStatus" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Default">
                <ChildContent Context="ctx">
                    <DxCheckBox @bind-Checked="EditModel.YearIsDefault" />
                </ChildContent>
            </DxFormLayoutItem>

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Year";
    private YearModel EditModel { get; set; } = new();

    public void Show(YearModel year)
    {
        EditModel = year != null ? new YearModel
        {
            YearId = year.YearId,
            YearName = year.YearName,
            YearDateFrom = year.YearDateFrom,
            YearDateTo = year.YearDateTo,
            YearStatus = year.YearStatus,
            YearIsDefault = year.YearIsDefault
        } : new YearModel
        {
            YearDateFrom = DateTime.Now,
            YearDateTo = DateTime.Now.AddMonths(12),
            YearStatus = true
        };

        Title = year?.YearId > 0 ? "Edit Year" : "Add Year";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            if (EditModel.YearId == 0)
            {
                var result = await YearService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Year created successfully!");
                else
                {
                    ToastService.Error("Failed to create Year!");
                    return;
                }
            }
            else
            {
                var result = await YearService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Year updated successfully!");
                else
                {
                    ToastService.Error("Failed to update Year!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving year: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
