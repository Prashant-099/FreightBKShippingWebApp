@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject UserService UserService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject UserRoleService UserRoleService
@inject BranchService BranchService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" CloseOnOutsideClick="false" MaxWidth="600px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxuseraddedits">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>

            <DxFormLayoutItem Caption="User Name" ColSpanMd="12">
                <DxTextBox @bind-Text="EditModel.UserName" />
            </DxFormLayoutItem> 

            <DxFormLayoutItem Caption="First Name" ColSpanMd="12">
                <DxTextBox @bind-Text="EditModel.UserFirstName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Last Name" ColSpanMd="12">
                <DxTextBox @bind-Text="EditModel.UserLastName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                <DxTextBox @bind-Text="EditModel.UserEmail" />
            </DxFormLayoutItem>
            @if (IsNewUser)
            {
                <DxFormLayoutItem Caption="Password" ColSpanMd="12">
                    <DxTextBox @bind-Text="EditModel.UserPassword" Password="true" />
                </DxFormLayoutItem>
            }

            <DxFormLayoutItem Caption="Branch" ColSpanMd="12">
                <DxComboBox Data="@branchList"
                            TextFieldName="BranchName"
                            ValueFieldName="BranchId"
                            @bind-Value="EditModel.UserBranchId"></DxComboBox>
            </DxFormLayoutItem> 

            <DxFormLayoutItem Caption="Address" ColSpanMd="12">
                <DxMemo @bind-Text="EditModel.UserAddress" Rows="2" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Mobile" ColSpanMd="12">
                <DxTextBox @bind-Text="EditModel.UserMobile" />
            </DxFormLayoutItem>
        
            <DxFormLayoutItem Caption="Role" ColSpanMd="6">
                <DxComboBox Data="@rolelist"
                            TextFieldName="RoleName"
                            ValueFieldName="RoleUuid"
                            @bind-Value="EditModel.UserRoleId"></DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Status" ColSpanMd="6">
                <DxCheckBox @bind-Checked="IsActive" />
            </DxFormLayoutItem>


        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit User";
    private User EditModel { get; set; } = new();


    private List<UserRole> rolelist = new();
    private List<Branch> branchList = new();


	protected override async Task OnInitializedAsync()
	{
        rolelist = await UserRoleService.GetAllAsync();
        branchList = await BranchService.GetAllAsync();
	}
    private bool IsActive
    {
        get => EditModel.UserStatus == 1;
        set => EditModel.UserStatus = value ? (byte)1 : (byte)0;
    }

    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public bool IsNewUser { get; set; } = true; // true => create, false => edit

    public void Show(User user,bool isNew)
    {
        if (user != null)
        {
            EditModel = user;
            IsNewUser = isNew;
            Title = "Edit User";
        }
        else
        {
            EditModel = new User();
            Title = "Add User";
        }
        Visible = true;
    }

    private void Hide() => Visible = false;

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool isNew = string.IsNullOrEmpty(EditModel.UserId);
            if (isNew && string.IsNullOrWhiteSpace(EditModel.UserPassword))
            {
                ToastService.Error("Password is required for new user!");
                return;
            }
            bool success = isNew
                ? await UserService.CreateAsync(EditModel)
                : await UserService.UpdateAsync(EditModel);

            if (!success)
            {
                ToastService.Error(isNew ? "User creation failed!" : "User update failed!");
                return;
            }

            ToastService.Success(isNew ? "User created successfully!" : "User updated successfully!");
            Visible = false;
            await OnSaved.InvokeAsync();
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
