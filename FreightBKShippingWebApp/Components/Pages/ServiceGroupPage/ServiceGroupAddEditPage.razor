@using FreightBKShipping.Models
@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject ServiceGroupService ServiceGroupService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="450px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="CXservicegp">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutItem Caption="Group Name" ColSpanMd="10">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.ServiceGroupsName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Description" ColSpanMd="10">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.ServiceGroupsRemarks" />
                </ChildContent>
            </DxFormLayoutItem>
@* <DxFormLayoutItem Caption="Active">
                <ChildContent>
                    <DxCheckBox @bind-Checked="EditModel.ServiceGroupsStatus" />
                </ChildContent>
            </DxFormLayoutItem> *@
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Service Group";
    private ServiceGroup EditModel { get; set; } = new();

    public void Show(ServiceGroup group)
    {
        EditModel = group != null ? new ServiceGroup
        {
            ServiceGroupsId = group.ServiceGroupsId,
            ServiceGroupsName = group.ServiceGroupsName,
            ServiceGroupsStatus = group.ServiceGroupsStatus,
            ServiceGroupsRemarks = group.ServiceGroupsRemarks,
        } : new ServiceGroup
        {
            ServiceGroupsStatus = true
        };

        Title = group?.ServiceGroupsId > 0 ? "Edit Service Group" : "Add Service Group";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool result;
            if (EditModel.ServiceGroupsId == 0)
            {
                result = await ServiceGroupService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Service Group created successfully!");
                else
                {
                    ToastService.Error("Failed to create Service Group!");
                    return;
                }
            }
            else
            {
                result = await ServiceGroupService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Service Group updated successfully!");
                else
                {
                    ToastService.Error("Failed to update Service Group!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving Service Group: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
