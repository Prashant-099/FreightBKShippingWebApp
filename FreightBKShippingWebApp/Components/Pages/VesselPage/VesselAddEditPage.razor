@using FreightBKShippingWebApp.Models
@using FreightBKShippingWebApp.Services
@inject VesselService VesselService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="650px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxtvesel">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout ColCount="2">

            <DxFormLayoutItem Caption="Vessel Name" ColSpanMd="10">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.VesselName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="ETA">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselEta" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Qty Opening">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselQtyOpening" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="ATA">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselAta" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="CBM Opening">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselCbmOpening" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="EDT">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselEdt" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="No. of BL Opening">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselNoOfBLOpening" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Sailing Date">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselDtSailing" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Total Qty">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselQty" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Berting Date">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselDtBerting" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Total CBM">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselCbm" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Demmurate Date">
                <ChildContent>
                    <DxDateEdit @bind-Date="EditModel.VesselDtDemmurate" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="No. of BL">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.VesselNoOfBL" ShowSpinButtons="false" />
                </ChildContent>
            </DxFormLayoutItem>
            

            @* <DxFormLayoutItem Caption="Active">
                <ChildContent>
                    <DxCheckBox @bind-Checked="EditModel.VesselStatus" />
                </ChildContent>
            </DxFormLayoutItem> *@

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Vessel";
    private Vessel EditModel { get; set; } = new();

    public void Show(Vessel? vessel)
    {
        EditModel = vessel != null ? new Vessel
        {
            VesselId = vessel.VesselId,
            VesselName = vessel.VesselName,
            VesselEta = vessel.VesselEta,
            VesselEdt = vessel.VesselEdt,
            VesselAta = vessel.VesselAta,
            VesselQty = vessel.VesselQty,
            VesselCbm = vessel.VesselCbm,
            VesselNoOfBL = vessel.VesselNoOfBL,
            VesselQtyOpening = vessel.VesselQtyOpening,
            VesselCbmOpening = vessel.VesselCbmOpening,
            VesselNoOfBLOpening = vessel.VesselNoOfBLOpening,
            VesselDtSailing = vessel.VesselDtSailing,
            VesselDtBerting = vessel.VesselDtBerting,
            VesselDtDemmurate = vessel.VesselDtDemmurate,
            VesselStatus = vessel.VesselStatus
        } : new Vessel
        {
            VesselStatus = true,
            VesselEta = DateTime.Now
        };

        Title = vessel?.VesselId > 0 ? "Edit Vessel" : "Add Vessel";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool result;
            if (EditModel.VesselId == 0)
            {
                result = await VesselService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Vessel created successfully!");
                else
                    ToastService.Error("Failed to create vessel!");
            }
            else
            {
                result = await VesselService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Vessel updated successfully!");
                else
                    ToastService.Error("Failed to update vessel!");
            }

            if (result)
            {
                Visible = false;
                await OnSaved.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving vessel: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
