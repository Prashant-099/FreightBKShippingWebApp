@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject VoucherService VoucherService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="700px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctnaddeditvocher">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutTabPages>

                <!-- Voucher Info -->
                <DxFormLayoutTabPage Caption="Voucher Info">
                    <DxFormLayoutItem Caption="Type" Context="ctxvocher">
                        <DxComboBox Data="@voucherGroupList"
                                    @bind-Value="EditModel.VoucherGroup"
                                    ValueFieldName="Value"
                                    TextFieldName="Text"
                                    NullText="Select Voucher Group..." />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Voucher Code">
                        <DxTextBox @bind-Text="EditModel.VoucherCode" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Voucher Name">
                        <DxTextBox @bind-Text="EditModel.VoucherName" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Title">
                        <DxTextBox @bind-Text="EditModel.VoucherTitle" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Method Of Numbering">
                        <DxComboBox Data="@methodList"
                                    @bind-Value="EditModel.VoucherMethod"
                                    TextFieldName="Text"
                                    ValueFieldName="Value" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Is Duplicate">
                        <DxCheckBox @bind-Checked="EditModel.VoucherIsDuplicate" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Reset">
                        <DxComboBox Data="@noresetList"
                                    @bind-Value="EditModel.VoucherReset"
                                    TextFieldName="Text"
                                    ValueFieldName="Value"
                                    NullText="Select Reset Option..." />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Is Tax Invoice">
                        <DxCheckBox @bind-Checked="EditModel.VoucherIsTaxInvoice" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Bank 1">
                        <DxSpinEdit @bind-Value="EditModel.VoucherBank1" MinValue="0" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Report ID / reportformats">
                        <DxSpinEdit @bind-Value="EditModel.VoucherReportId" MinValue="0" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Jurisdiction">
                        <DxTextBox @bind-Text="EditModel.VoucherJurisdiction" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Remarks">
                        <DxMemo @bind-Text="EditModel.VoucherRemarks" Rows="2" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Copies">
                        <DxSpinEdit @bind-Value="EditModel.VoucherCopies" MinValue="1" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Show Dialog">
                        <DxCheckBox @bind-Checked="EditModel.VoucherIsPrintDialog" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Show Preview">
                        <DxCheckBox @bind-Checked="EditModel.VoucherIsShowPreview" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Is Print">
                        <DxCheckBox @bind-Checked="EditModel.VoucherIsPrint" />
                    </DxFormLayoutItem>
                </DxFormLayoutTabPage>

                <!-- Voucher Number Tab -->
                <DxFormLayoutTabPage Caption="Voucher Number">
                    <DxGrid @ref="voucherGrid"
                            Data="@VoucherDetailList"
                            KeyFieldName="VoucherDetailId"
                            EditMode="GridEditMode.EditRow"
                            ShowBorders="true"
                            ShowColumnLines="true"
                            PageSize="10"
                            EditModelSaving="OnVoucherDetailSaving"
                            DataItemDeleting="OnVoucherDetailDeleting"
                            CustomizeEditModel="OnVoucherDetailCustomizeEditModel">

                        <Columns>
                            <DxGridCommandColumn Width="100px" NewButtonVisible="true" EditButtonVisible="true" DeleteButtonVisible="true" />
                            <DxGridDataColumn FieldName="VoucherDetailYearId" Caption="Fin Year Id" />
                            <DxGridDataColumn FieldName="VoucherDetailDate" Caption="Date" />
                            <DxGridDataColumn FieldName="VoucherDetailStartNo" Caption="Start No." />
                            <DxGridDataColumn FieldName="VoucherDetailPrefix" Caption="Prefix" />
                            <DxGridDataColumn FieldName="VoucherDetailSufix" Caption="Suffix" />
                            <DxGridDataColumn FieldName="VoucherDetailZeroFill" Caption="Zero Fill" />
                            <DxGridDataColumn FieldName="VoucherDetailLastNo" Caption="Last No" />
                            <DxGridDataColumn FieldName="VoucherDetailLutno" Caption="LUT No" />
                        </Columns>
                    </DxGrid>
                </DxFormLayoutTabPage>
            </DxFormLayoutTabPages>
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    private List<VoucherDetail> VoucherDetailList = new();
    private List<Voucher> VoucherList = new();
    private DxGrid voucherGrid;

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Voucher";
    private Voucher EditModel { get; set; } = new();

    [Parameter] public EventCallback OnSaved { get; set; }

    // Combo lists
    private List<SelectItem> noresetList = new()
    {
        new() { Text = "YEARLY", Value = "YEARLY" },
        new() { Text = "MONTHLY", Value = "MONTHLY" }
    };

    private List<SelectItem> methodList = new()
    {
        new() { Text = "Manual", Value = "Manual" },
        new() { Text = "Automatic", Value = "Automatic" }
    };

    private List<SelectItem> voucherGroupList = new()
    {
        new() { Text = "CREDIT NOTE", Value = "CREDIT NOTE" },
        new() { Text = "DEBIT NOTE", Value = "DEBIT NOTE" },
        new() { Text = "SALES", Value = "SALES" },
        new() { Text = "RECEIPT", Value = "RECEIPT" },
        new() { Text = "PAYMENT", Value = "PAYMENT" },
        new() { Text = "JOURNAL", Value = "JOURNAL" },
        new() { Text = "JOB", Value = "JOB" },
        new() { Text = "PURCHAS", Value = "PURCHAS" },
        new() { Text = "CONTRA", Value = "CONTRA" },
        new() { Text = "LR", Value = "LR" },
        new() { Text = "LR PSYMNET", Value = "LR PSYMNET" },
        new() { Text = "LR RECIPT", Value = "LR RECIPT" },
        new() { Text = "EXPENCE", Value = "EXPENCE" },
        new() { Text = "QUTTION", Value = "QUTTION" }
    };

    public void Show(Voucher voucher)
    {
        if (voucher != null)
        {
            EditModel = voucher;
            _ = LoadVoucherDetails(voucher.VoucherId);
            Title = "Edit Voucher";
        }
        else
        {
            EditModel = new Voucher();
            VoucherDetailList.Clear();
            VoucherDetailList.Add(new VoucherDetail
                {
                    VoucherDetailYearId = DateTime.UtcNow.Year,
                    VoucherDetailDate = DateTime.UtcNow,
                    VoucherDetailPrefix = "",
                    VoucherDetailSufix = "",
                    VoucherDetailLastNo = 1,
                    VoucherDetailZeroFill = 0,
                    VoucherDetailLutno = ""
                });
            Title = "Add Voucher";
        }

        Visible = true;
    }

    private void Hide() => Visible = false;

    private async Task LoadVoucherDetails(int voucherId)
    {
        // Fetch the voucher with its details
        EditModel = await VoucherService.GetByIdAsync(voucherId);

        if (EditModel != null)
        {
            // Parent list contains only this voucher
            VoucherList = new List<Voucher> { EditModel };

            // Child list contains all details
            VoucherDetailList = EditModel.VoucherDetails.ToList();
        }
        else
        {
            VoucherList = new List<Voucher>();
            VoucherDetailList = new List<VoucherDetail>();
        }

        StateHasChanged();
    }



    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            // Attach the child list to the main model
            EditModel.VoucherDetails = VoucherDetailList;

            bool isNew = EditModel.VoucherId == 0;

            // Single service call for both parent + child
            bool success = isNew
                ? await VoucherService.CreateAsync(EditModel)
                : await VoucherService.UpdateAsync(EditModel);

            if (!success)
            {
                ToastService.Error(isNew ? "Voucher creation failed!" : "Voucher update failed!");
                return;
            }

            ToastService.Success(isNew ? "Voucher created successfully!" : "Voucher updated successfully!");
            Visible = false;
            await OnSaved.InvokeAsync();
        }
        finally
        {
            LoadingService.Hide();
        }
    }


    private Task OnVoucherDetailSaving(GridEditModelSavingEventArgs e)
    {
        var model = (VoucherDetail)e.EditModel;
        if (e.IsNew)
        {
            model.VoucherDetailId = VoucherDetailList.Count > 0
                ? VoucherDetailList.Max(x => x.VoucherDetailId) + 1
                : 1;
            VoucherDetailList.Add(model);
        }
        else
        {
            var existing = VoucherDetailList.FirstOrDefault(x => x.VoucherDetailId == model.VoucherDetailId);
            if (existing != null)
            {
                existing.VoucherDetailYearId = model.VoucherDetailYearId;
                existing.VoucherDetailDate = model.VoucherDetailDate;
                existing.VoucherDetailStartNo = model.VoucherDetailStartNo;
                existing.VoucherDetailPrefix = model.VoucherDetailPrefix;
                existing.VoucherDetailSufix = model.VoucherDetailSufix;
                existing.VoucherDetailZeroFill = model.VoucherDetailZeroFill;
                existing.VoucherDetailLastNo = model.VoucherDetailLastNo;
                existing.VoucherDetailLutno = model.VoucherDetailLutno;
            }
        }
        return Task.CompletedTask;
    }

    private Task OnVoucherDetailDeleting(GridDataItemDeletingEventArgs e)
    {
        var model = (VoucherDetail)e.DataItem;
        VoucherDetailList.Remove(model);
        return Task.CompletedTask;
    }

    private void OnVoucherDetailCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var model = (VoucherDetail)e.EditModel;
            model.VoucherDetailDate = DateTime.UtcNow;
            model.VoucherDetailPrefix = "";
            model.VoucherDetailSufix = "";
        }
    }

    private class SelectItem
    {
        public string Text { get; set; } = "";
        public string Value { get; set; } = "";
    }
}
