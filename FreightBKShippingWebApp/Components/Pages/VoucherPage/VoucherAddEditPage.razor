@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject VoucherService VoucherService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="700px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="vocherctx">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutItem Caption="Voucher Name">
                <DxTextBox @bind-Text="EditModel.VoucherName" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Voucher Group">
                <DxTextBox @bind-Text="EditModel.VoucherGroup" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Title">
                <DxTextBox @bind-Text="EditModel.VoucherTitle" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Method">
                <DxComboBox Data="@methodList"
                            @bind-Value="EditModel.VoucherMethod"
                            TextFieldName="Text"
                            ValueFieldName="Value"
                            AllowUserInput="false" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <DxCheckBox @bind-Checked="EditModel.VoucherStatus" />
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Copies">
                <DxSpinEdit @bind-Value="EditModel.VoucherCopies" MinValue="1" />
            </DxFormLayoutItem>
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Voucher";
    private Voucher EditModel { get; set; } = new();
    private List<object> methodList = new() { new { Text = "Manual", Value = "Manual" }, new { Text = "Automatic", Value = "Automatic" } };

    public void Show(Voucher voucher)
    {
        EditModel = voucher != null ? new Voucher
            {
                VoucherId = voucher.VoucherId,
                VoucherName = voucher.VoucherName,
                VoucherGroup = voucher.VoucherGroup,
                VoucherMethod = voucher.VoucherMethod,
                VoucherStatus = voucher.VoucherStatus,
                VoucherCopies = voucher.VoucherCopies,
				VoucherTitle = voucher.VoucherTitle
            } : new Voucher();

        Title = voucher?.VoucherId > 0 ? "Edit Voucher" : "Add Voucher";
        Visible = true;
    }

    private void Hide() => Visible = false;

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            if (EditModel.VoucherId == 0)
            {
                var result = await VoucherService.CreateAsync(EditModel);
                if (result) ToastService.Success("Voucher created successfully!");
                else { ToastService.Error("Voucher creation failed!"); return; }
            }
            else
            {
                var result = await VoucherService.UpdateAsync(EditModel);
                if (result) ToastService.Success("Voucher updated successfully!");
                else { ToastService.Error("Voucher update failed!"); return; }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
