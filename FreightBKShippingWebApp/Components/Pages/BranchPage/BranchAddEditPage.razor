@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject BranchService BranchService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject StateService StateService
@inject CountryService CountryService
<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="700px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="ctxeditform">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>
            <DxFormLayoutItem Caption="Branch Name">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Print Name">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchPrintName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="GSTIN">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchGstin" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="PAN">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchPan" />
                </ChildContent>
            </DxFormLayoutItem>

        

            <DxFormLayoutItem Caption="Address">
                <ChildContent Context="ctx">
                    <DxMemo @bind-Text="EditModel.BranchAddress1" Rows="2" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="City">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchCity" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="State">
                <ChildContent Context="ctx">
                   
                            <DxComboBox TData="State" TValue="int"
                                        Data="@stateList"
                                        TextFieldName="StateName"
                                    ValueFieldName="StateId"
                                        ClearButtonVisible="true"
                                        AllowUserInput="false"
                                        NullText="-- Select State --"
                                        @bind-Value="EditModel.BranchStateId"
                                        SearchMode="ListSearchMode.AutoSearch"
                                        SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Country">
                <ChildContent Context="ctx">
                    
                        <DxComboBox TData="Country" TValue="String"
                                    Data="@CountryList"
                                    TextFieldName="CountryName"
                                    ValueFieldName="CountryName"
                                    ClearButtonVisible="true"
                                    AllowUserInput="false"
                                    NullText="-- Select Country --"
                                    @bind-Value="EditModel.BranchCountry"
                                    SearchMode="ListSearchMode.AutoSearch"
                                    SearchFilterCondition="ListSearchFilterCondition.StartsWith" />

                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Contact No">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchContactNo" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Email">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.BranchEmail" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <ChildContent Context="ctx">
                    <DxCheckBox @bind-Checked="EditModel.BranchStatus" />
                </ChildContent>
            </DxFormLayoutItem>
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Branch";
    private Branch EditModel { get; set; } = new();
    private List<State> stateList = new();
    private List<Country> CountryList = new();
    public void Show(Branch branch)
    {
        EditModel = branch != null ? new Branch
        {
            BranchId = branch.BranchId,
            BranchName = branch.BranchName,
            BranchGstin = branch.BranchGstin,
            BranchPan = branch.BranchPan,
            BranchPrintName = branch.BranchPrintName,
            BranchAddress1 = branch.BranchAddress1,
            BranchCity = branch.BranchCity,
            BranchState = branch.BranchState,
            BranchStateId = branch.BranchStateId,
            BranchCountry = branch.BranchCountry,
            BranchContactNo = branch.BranchContactNo,
            BranchEmail = branch.BranchEmail,
            BranchStatus = branch.BranchStatus
        } : new Branch();

        Title = branch?.BranchId > 0 ? "Edit Branch" : "Add Branch";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }
    protected override async Task OnInitializedAsync()
    {
        stateList = await StateService.GetStatesAsync();
        CountryList = await CountryService.GetAllAsync();
    }
    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            if (EditModel.BranchId == 0)
            {
                var result =  await BranchService.CreateAsync(EditModel);
                if (result == true)
                    ToastService.Success("Branch created successfully!");
                else
                {
                    ToastService.Error("Branch Failed To Create!");
                    return;
                }
            }
            else
            {
                var result = await BranchService.UpdateAsync(EditModel);
                if (result == true)
                    ToastService.Success("Branch Update successfully!");
                else
                {
                    ToastService.Error("Branch Failed To Update!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving branch: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
