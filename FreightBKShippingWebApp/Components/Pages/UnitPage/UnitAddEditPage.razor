@using FreightBKShippingWebApp.Models
@using FreightBKShippingWebApp.Services
@inject UnitService UnitService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" >
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Unit Name" ColSpanMd="11">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.UnitName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Formal Name" ColSpanMd="11">
                <ChildContent Context="ctx">
                    <DxTextBox @bind-Text="EditModel.UnitFormalName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Group Name" ColSpanMd="11">
                <ChildContent Context="ctx">
                    <DxComboBox Data="@UnitList"
                                @bind-Value="EditModel.UnitGstUnit"
                                TextFieldName="Text"
                                ValueFieldName="Value"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                AllowUserInput="true"
                                SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </ChildContent>
            </DxFormLayoutItem>

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Unit";
    private Unit EditModel { get; set; } = new();
    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }
      
    }
    List<SelectItem> UnitList = new()
{
    new SelectItem { Text = "BAG - BAGS", Value = "BAG" },
    new SelectItem { Text = "BAL - BALE", Value = "BAL" },
    new SelectItem { Text = "BDL - BUNDLES", Value = "BDL" },
    new SelectItem { Text = "BKL - BUCKLES", Value = "BKL" },
    new SelectItem { Text = "BOU - BILLION OF UNITS", Value = "BOU" },
    new SelectItem { Text = "BOX - BOX", Value = "BOX" },
    new SelectItem { Text = "BTL - BOTTLES", Value = "BTL" },
    new SelectItem { Text = "BUN - BUNCHES", Value = "BUN" },
    new SelectItem { Text = "CAN - CANS", Value = "CAN" },
    new SelectItem { Text = "CBM - CUBIC METERS", Value = "CBM" },
    new SelectItem { Text = "CCM - CUBIC CENTIMETERS", Value = "CCM" },
    new SelectItem { Text = "CMS - CENTIMETERS", Value = "CMS" },
    new SelectItem { Text = "CTN - CARTONS", Value = "CTN" },
    new SelectItem { Text = "DOZ - DOZENS", Value = "DOZ" },
    new SelectItem { Text = "DRM - DRUMS", Value = "DRM" },
    new SelectItem { Text = "GGK - GREAT GROSS", Value = "GGK" },
    new SelectItem { Text = "GMS - GRAMMES", Value = "GMS" },
    new SelectItem { Text = "GRS - GROSS", Value = "GRS" },
    new SelectItem { Text = "GYD - GROSS YARDS", Value = "GYD" },
    new SelectItem { Text = "KGS - KILOGRAMS", Value = "KGS" },
    new SelectItem { Text = "KLR - KILOLITRE", Value = "KLR" },
    new SelectItem { Text = "KME - KILOMETRE", Value = "KME" },
    new SelectItem { Text = "MLT - MILILITRE", Value = "MLT" },
    new SelectItem { Text = "MTR - METERS", Value = "MTR" },
    new SelectItem { Text = "MTS - METRIC TON", Value = "MTS" },
    new SelectItem { Text = "NOS - NUMBERS", Value = "NOS" },
    new SelectItem { Text = "PAC - PACKS", Value = "PAC" },
    new SelectItem { Text = "PCS - PIECES", Value = "PCS" },
    new SelectItem { Text = "PRS - PAIRS", Value = "PRS" },
    new SelectItem { Text = "QTL - QUINTAL", Value = "QTL" },
    new SelectItem { Text = "ROL - ROLLS", Value = "ROL" },
    new SelectItem { Text = "SET - SETS", Value = "SET" },
    new SelectItem { Text = "SQF - SQUARE FEET", Value = "SQF" },
    new SelectItem { Text = "SQM - SQUARE METERS", Value = "SQM" },
    new SelectItem { Text = "SQY - SQUARE YARDS", Value = "SQY" },
    new SelectItem { Text = "TBS - TABLETS", Value = "TBS" },
    new SelectItem { Text = "TGM - TEN GROSS", Value = "TGM" },
    new SelectItem { Text = "THD - THOUSANDS", Value = "THD" },
    new SelectItem { Text = "TON - TONNES", Value = "TON" },
    new SelectItem { Text = "TUB - TUBES", Value = "TUB" },
    new SelectItem { Text = "UGS - US GALLONS", Value = "UGS" },
    new SelectItem { Text = "UNT - UNITS", Value = "UNT" },
    new SelectItem { Text = "YDS - YARDS", Value = "YDS" },
    new SelectItem { Text = "OTH - OTHERS", Value = "OTH" },
    new SelectItem { Text = "LTR - LITERS", Value = "LTR" }
};

    public void Show(Unit? unit)
    {
        if (unit != null && unit.UnitId > 0)
        {
            EditModel = new Unit
            {
                UnitId = unit.UnitId,
                UnitCompanyId = unit.UnitCompanyId,
                UnitAddedByUserId = unit.UnitAddedByUserId,
                UnitUpdatedByUserId = unit.UnitUpdatedByUserId,
                UnitName = unit.UnitName,
                UnitFormalName = unit.UnitFormalName,
                UnitGstUnit = unit.UnitGstUnit,
                UnitStatus = unit.UnitStatus,
                UnitCreated = unit.UnitCreated,
                UnitUpdated = DateTime.Now
            };
            Title = "Edit Unit";
        }
        else
        {
            EditModel = new Unit
            {
                UnitStatus = true,
                UnitCreated = DateTime.Now
            };
            Title = "Add Unit";
        }

        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show("Saving unit...");
        try
        {
            bool result;

            if (EditModel.UnitId == 0)
            {
                result = await UnitService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Unit created successfully!");
                else
                    ToastService.Error("Failed to create unit!");
            }
            else
            {
                result = await UnitService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Unit updated successfully!");
                else
                    ToastService.Error("Failed to update unit!");
            }

            if (result)
            {
                Visible = false;
                await OnSaved.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving unit: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
