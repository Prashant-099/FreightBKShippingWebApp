
@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Models
@using FreightBKShippingWebApp.Services
@inject NotifyService NotifyService
@inject ToasteService ToastService
@inject LoadingService LoadingService
@inject CountryService CountryService
@inject StateService StateService
<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="580px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxnotify">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Notify Name" ColSpanMd="13">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Type" ColSpanMd="13">
                <ChildContent>
                    <DxComboBox Data="@TypeList"
                                @bind-Value="EditModel.NotifyType"
                                TextFieldName="Text"
                                ValueFieldName="Value"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                AllowUserInput="true"
                                SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Address" ColSpanMd="13">
                <ChildContent>
                    <DxMemo @bind-Text="EditModel.NotifyAddress1" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>

           @*  <DxFormLayoutItem Caption="Address 2">
                <ChildContent>
                    <DxMemo @bind-Text="EditModel.NotifyAddress2" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem> *@

            <DxFormLayoutItem Caption="City">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyCity" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="State" ColSpanMd="6">
                <ChildContent>
                    <DxComboBox TData="State" TValue="int"
                                Data="@stateList"
                                TextFieldName="StateName"
                                ValueFieldName="StateId"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                AllowUserInput="false"
                                NullText="-- Select State --"
                                @bind-Value="EditModel.NotifyStateId"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Pincode">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyPincode" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Country">
                <ChildContent>
                    <DxComboBox TData="Country" TValue="String"
                                Data="@CountryList"
                                TextFieldName="CountryName"
                                ValueFieldName="CountryName"
                                ClearButtonVisible="true"
                                AllowUserInput="false"
                                NullText="-- Select Country --"
                                @bind-Value="EditModel.NotifyCountry"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="GSTIN">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyGstNo" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Contact No">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyContactNo" />
                </ChildContent>
            </DxFormLayoutItem>
          
            <DxFormLayoutItem Caption="Email">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyEmail" />
                </ChildContent>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="PAN">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.NotifyPan" />
                </ChildContent>
            </DxFormLayoutItem>

          @*   <DxFormLayoutItem Caption="Active">
                <ChildContent>
                    <DxCheckBox @bind-Checked="EditModel.NotifyStatus" />
                </ChildContent>
            </DxFormLayoutItem> *@

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Notify";
    private Notify EditModel { get; set; } = new();
    private List<string> notifyTypes = new() { "Notify", "Consignee", "Exporter" };
    private List<State> stateList = new();
    private List<Country> CountryList = new();
    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }

    }
    List<SelectItem> TypeList = new()
{
    new SelectItem { Text = "LINE", Value = "LINE" },
    new SelectItem { Text = "SHIPPER", Value = "SHIPPER" },
    new SelectItem { Text = "CONSIGNEE", Value = "CONSIGNEE" },
    new SelectItem { Text = "CONSIGNOR", Value = "CONSIGNOR" },
    new SelectItem { Text = "CHA", Value = "CHA" },
    new SelectItem { Text = "AGENT", Value = "AGENT" },
    new SelectItem { Text = "YARD", Value = "YARD" },
    new SelectItem { Text = "NOTIFY", Value = "NOTIFY" },
    new SelectItem { Text = "SALESMAN", Value = "SALESMAN" },
    new SelectItem { Text = "REFRENCEBY", Value = "REFRENCEBY" },
    new SelectItem { Text = "ALL", Value = "ALL" },

};
        protected override async Task OnInitializedAsync()
        {
            stateList = await StateService.GetStatesAsync();
            CountryList = await CountryService.GetAllAsync();
        }
    public void Show(Notify notify)
    {
        if (notify != null)
        {
            EditModel = new Notify
            {
                NotifyId = notify.NotifyId,
                NotifyName = notify.NotifyName,
                NotifyType = notify.NotifyType,
                NotifyAddress1 = notify.NotifyAddress1,
                NotifyAddress2 = notify.NotifyAddress2,
                NotifyCity = notify.NotifyCity,
                NotifyState = notify.NotifyState,
                NotifyStateId = notify.NotifyStateId,
                NotifyCountry = notify.NotifyCountry,
                NotifyEmail = notify.NotifyEmail,
                NotifyContactNo = notify.NotifyContactNo,
                NotifyGstNo = notify.NotifyGstNo,
                NotifyPan = notify.NotifyPan,
                NotifyStatus = notify.NotifyStatus,
                NotifyUpdated = DateTime.Now
            };
            Title = "Edit Notify";
        }
        else
        {
            EditModel = new Notify
            {
                NotifyStatus = true,
                NotifyCreated = DateTime.Now,
                NotifyUpdated = DateTime.Now
            };
            Title = "Add Notify";
        }

        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show("Saving notify...");
        try
        {
            bool result;
            if (EditModel.NotifyId == 0)
            {
                result = await NotifyService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Notify created successfully!");
                else
                {
                    ToastService.Error("Failed to create notify!");
                    return;
                }
            }
            else
            {
                result = await NotifyService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Notify updated successfully!");
                else
                {
                    ToastService.Error("Failed to update notify!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving notify: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
