@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject CurrencyService CurrencyService
@inject ToasteService ToastService
@inject LoadingService LoadingService

<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="600px">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayout>
            <DxFormLayoutItem Caption="Name">
                <ChildContent Context="itemContext">
                    <DxTextBox @bind-Text="EditModel.CurrencyName" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Symbol">
                <ChildContent Context="itemContext">
                    <DxTextBox @bind-Text="EditModel.CurrencySymbol" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Active">
                <ChildContent Context="itemContext">
                    <DxCheckBox @bind-Checked="EditModel.CurrencyStatus" />
                </ChildContent>
            </DxFormLayoutItem>
        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Currency";
    private Currency EditModel { get; set; } = new();

    public void Show(Currency currency)
    {
        EditModel = currency != null ? new Currency
        {
            CurrencyId = currency.CurrencyId,
            CurrencyName = currency.CurrencyName,
            CurrencySymbol = currency.CurrencySymbol,
            CurrencyStatus = currency.CurrencyStatus
        } : new Currency();

        Title = currency?.CurrencyId > 0 ? "Edit Currency" : "Add Currency";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            if (EditModel.CurrencyId == 0)
            {
                var result = await CurrencyService.CreateAsync(EditModel);
                if(result==true)
                    ToastService.Success("Currency created successfully!");
                else
                {
                    ToastService.Error("Currency Failed To Created !");
                    return;
                }
            }
            else
            {
                var result = await CurrencyService.UpdateAsync(EditModel);
                if (result == true)
                    ToastService.Success("Currency updated successfully!");
                else
                {
                    ToastService.Error("Currency Failed To Update !");
                    return;
                }

            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving currency: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
