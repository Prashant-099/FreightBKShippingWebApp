@using FreightBKShipping.Models
@using FreightBKShippingWebApp.Model
@using FreightBKShippingWebApp.Services
@inject CargoService CargoService
@inject ToasteService ToastService
@inject HsnSacService HsnSacService
@inject LoadingService LoadingService
<DxPopup @bind-Visible="Visible" ShowCloseButton="true" HeaderText="@Title" Width="450px" CloseOnOutsideClick="false">
    <EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit" Context="cxcargo">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <DxFormLayout>

            <DxFormLayoutItem Caption="Cargo Name"ColSpanMd="11">
                <ChildContent>
                    <DxTextBox @bind-Text="EditModel.CargoName" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Cargo Type" ColSpanMd="11">
                <ChildContent>
                    <DxComboBox Data="@TypeList"
                                @bind-Value="EditModel.CargoType"
                                TextFieldName="Text"
                                ValueFieldName="Value"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                AllowUserInput="true"
                                SearchMode="ListSearchMode.AutoSearch" SearchFilterCondition="ListSearchFilterCondition.StartsWith" />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="HSN Code" ColSpanMd="11">
                <ChildContent>
                  
                    <DxComboBox TData="HsnSac" TValue="int"
                                Data="@HsnSacList"
                                TextFieldName="HsnName"
                                ValueFieldName="HsnId"
                                ClearButtonVisible="true"
                                AllowUserInput="false"
                                NullText="-- Select HSN/SAC --"
                                @bind-Value="EditModel.CargoHsn"
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.StartsWith" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>

           @*  <DxFormLayoutItem Caption="GST (%)">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.CargoGstPer"  />
                </ChildContent>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Cess (%)">
                <ChildContent>
                    <DxSpinEdit @bind-Value="EditModel.CargoCess"  />
                </ChildContent>
            </DxFormLayoutItem> *@

            <DxFormLayoutItem Caption="Remarks" ColSpanMd="11">
                <ChildContent>
                    <DxMemo @bind-Text="EditModel.CargoRemarks" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                </ChildContent>
            </DxFormLayoutItem>

            @* <DxFormLayoutItem Caption="Active">
                <ChildContent>
                    <DxCheckBox @bind-Checked="EditModel.CargoStatus" />
                </ChildContent>
            </DxFormLayoutItem> *@

        </DxFormLayout>

        <div class="mt-3 text-end">
            <DxButton Text="Save" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true" />
            <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Secondary" Click="Hide" />
        </div>
    </EditForm>
</DxPopup>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool Visible { get; set; }
    private string Title { get; set; } = "Add/Edit Cargo";
    private Cargo EditModel { get; set; } = new();
    private List<HsnSac> HsnSacList = new();
    public class SelectItem
    {
        public string Text { get; set; }
        public string Value { get; set; }

    }
    List<SelectItem> TypeList = new()
{
    new SelectItem { Text = "BAGS", Value = "BAGS" },
    new SelectItem { Text = "BOX", Value = "BOX" },
     new SelectItem { Text = "MTS", Value = "MTS" },
      new SelectItem { Text = "PCS", Value = "PCS" },
       new SelectItem { Text = "BUN", Value = "BUN" },
        new SelectItem { Text = "CONTAINER", Value = "CONTAINER" },
         new SelectItem { Text = "LOOSE", Value = "LOOSE" },
          new SelectItem { Text = "PALLET", Value = "PALLET" },
           new SelectItem { Text = "N/A", Value = "N/A" }
};
    protected override async Task OnInitializedAsync()
    {
        HsnSacList = await HsnSacService.GetAllAsync();

    }
    public void Show(Cargo cargo)
    {
        EditModel = cargo != null ? new Cargo
        {
            CargoId = cargo.CargoId,
            CargoName = cargo.CargoName,
            CargoType = cargo.CargoType,
            CargoHsn = cargo.CargoHsn,
            CargoRemarks = cargo.CargoRemarks,
            CargoGstPer = cargo.CargoGstPer,
            CargoCess = cargo.CargoCess,
            CargoStatus = cargo.CargoStatus,
            CargoCreated = cargo.CargoCreated,
            CargoUpdated = DateTime.Now
        } : new Cargo
        {
            CargoStatus = true,
            CargoGstPer = 0,
            CargoCess = 0,
            CargoCreated = DateTime.Now
        };

        Title = cargo?.CargoId > 0 ? "Edit Cargo" : "Add Cargo";
        Visible = true;
    }

    private void Hide()
    {
        Visible = false;
    }

    private async Task HandleValidSubmit()
    {
        LoadingService.Show();
        try
        {
            bool result;
            if (EditModel.CargoId == 0)
            {
                // EditModel.CargoGstPer = HsnSacList.HsnGstPer;
                // EditModel.CargoCess = HsnSacList.HsnCess;
                result = await CargoService.CreateAsync(EditModel);
                if (result)
                    ToastService.Success("Cargo created successfully!");
                else
                {
                    ToastService.Error("Failed to create Cargo!");
                    return;
                }
            }
            else
            {
                result = await CargoService.UpdateAsync(EditModel);
                if (result)
                    ToastService.Success("Cargo updated successfully!");
                else
                {
                    ToastService.Error("Failed to update Cargo!");
                    return;
                }
            }

            Visible = false;
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.Error($"Error saving cargo: {ex.Message}");
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
